// Code generated by go yacc.
//line sql.y:22
package parser

import __yyfmt__ "fmt"

//line sql.y:22
import "github.com/cockroachdb/cockroach/sql/privilege"

func unimplemented() {
	panic("TODO(pmattis): unimplemented")
}

//line sql.y:30
type sqlSymType struct {
	yys            int
	id             int
	pos            int
	empty          struct{}
	ival           int64
	boolVal        bool
	str            string
	strs           []string
	qname          *QualifiedName
	qnames         QualifiedNames
	indirectElem   IndirectionElem
	indirect       Indirection
	stmt           Statement
	stmts          []Statement
	selectStmt     SelectStatement
	colDef         *ColumnTableDef
	constraintDef  ConstraintTableDef
	tblDef         TableDef
	tblDefs        []TableDef
	colQual        ColumnQualification
	colQuals       []ColumnQualification
	colType        ColumnType
	colTypes       []ColumnType
	expr           Expr
	exprs          Exprs
	selExpr        SelectExpr
	selExprs       SelectExprs
	tblExpr        TableExpr
	tblExprs       TableExprs
	joinCond       JoinCond
	when           *When
	whens          []*When
	updateExpr     *UpdateExpr
	updateExprs    []*UpdateExpr
	limit          *Limit
	targetList     TargetList
	targetListPtr  *TargetList
	privilegeType  privilege.Kind
	privilegeList  privilege.List
	orderBy        OrderBy
	orders         []*Order
	order          *Order
	groupBy        GroupBy
	dir            Direction
	alterTableCmd  AlterTableCmd
	alterTableCmds AlterTableCmds
	isoLevel       IsolationLevel
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTES = 57380
const CASCADE = 57381
const CASE = 57382
const CAST = 57383
const CHAR = 57384
const CHARACTER = 57385
const CHECK = 57386
const COALESCE = 57387
const COLLATE = 57388
const COLLATION = 57389
const COLUMN = 57390
const COLUMNS = 57391
const COMMIT = 57392
const COMMITTED = 57393
const CONCAT = 57394
const CONFLICT = 57395
const CONSTRAINT = 57396
const COVERING = 57397
const CREATE = 57398
const CROSS = 57399
const CUBE = 57400
const CURRENT = 57401
const CURRENT_CATALOG = 57402
const CURRENT_DATE = 57403
const CURRENT_ROLE = 57404
const CURRENT_TIME = 57405
const CURRENT_TIMESTAMP = 57406
const CURRENT_USER = 57407
const CYCLE = 57408
const DATA = 57409
const DATABASE = 57410
const DATABASES = 57411
const DATE = 57412
const DAY = 57413
const DEC = 57414
const DECIMAL = 57415
const DEFAULT = 57416
const DEFERRABLE = 57417
const DELETE = 57418
const DESC = 57419
const DISTINCT = 57420
const DO = 57421
const DOUBLE = 57422
const DROP = 57423
const ELSE = 57424
const END = 57425
const ESCAPE = 57426
const EXCEPT = 57427
const EXISTS = 57428
const EXPLAIN = 57429
const EXTRACT = 57430
const FALSE = 57431
const FETCH = 57432
const FILTER = 57433
const FIRST = 57434
const FLOAT = 57435
const FOLLOWING = 57436
const FOR = 57437
const FOREIGN = 57438
const FROM = 57439
const FULL = 57440
const GRANT = 57441
const GRANTS = 57442
const GREATEST = 57443
const GROUP = 57444
const GROUPING = 57445
const HAVING = 57446
const HOUR = 57447
const IF = 57448
const IFNULL = 57449
const IN = 57450
const INDEX = 57451
const INITIALLY = 57452
const INNER = 57453
const INSERT = 57454
const INT = 57455
const INT64 = 57456
const INTEGER = 57457
const INTERSECT = 57458
const INTERVAL = 57459
const INTO = 57460
const IS = 57461
const ISOLATION = 57462
const JOIN = 57463
const KEY = 57464
const LATERAL = 57465
const LEADING = 57466
const LEAST = 57467
const LEFT = 57468
const LEVEL = 57469
const LIKE = 57470
const LIMIT = 57471
const LOCAL = 57472
const LOCALTIME = 57473
const LOCALTIMESTAMP = 57474
const LSHIFT = 57475
const MATCH = 57476
const MINUTE = 57477
const MONTH = 57478
const NAME = 57479
const NAMES = 57480
const NATURAL = 57481
const NEXT = 57482
const NO = 57483
const NOT = 57484
const NOTHING = 57485
const NULL = 57486
const NULLIF = 57487
const NULLS = 57488
const NUMERIC = 57489
const OF = 57490
const OFF = 57491
const OFFSET = 57492
const ON = 57493
const ONLY = 57494
const OR = 57495
const ORDER = 57496
const ORDINALITY = 57497
const OUT = 57498
const OUTER = 57499
const OVER = 57500
const OVERLAPS = 57501
const OVERLAY = 57502
const PARTIAL = 57503
const PARTITION = 57504
const PLACING = 57505
const POSITION = 57506
const PRECEDING = 57507
const PRECISION = 57508
const PRIMARY = 57509
const RANGE = 57510
const READ = 57511
const REAL = 57512
const RECURSIVE = 57513
const REF = 57514
const REFERENCES = 57515
const RENAME = 57516
const REPEATABLE = 57517
const RESTRICT = 57518
const RETURNING = 57519
const REVOKE = 57520
const RIGHT = 57521
const ROLLBACK = 57522
const ROLLUP = 57523
const ROW = 57524
const ROWS = 57525
const RSHIFT = 57526
const SEARCH = 57527
const SECOND = 57528
const SELECT = 57529
const SERIALIZABLE = 57530
const SESSION = 57531
const SESSION_USER = 57532
const SET = 57533
const SHOW = 57534
const SIMILAR = 57535
const SIMPLE = 57536
const SMALLINT = 57537
const SNAPSHOT = 57538
const SOME = 57539
const SQL = 57540
const STRICT = 57541
const STRING = 57542
const STORING = 57543
const SUBSTRING = 57544
const SYMMETRIC = 57545
const TABLE = 57546
const TABLES = 57547
const TEXT = 57548
const THEN = 57549
const TIME = 57550
const TIMESTAMP = 57551
const TO = 57552
const TRAILING = 57553
const TRANSACTION = 57554
const TREAT = 57555
const TRIM = 57556
const TRUE = 57557
const TRUNCATE = 57558
const TYPE = 57559
const UNBOUNDED = 57560
const UNCOMMITTED = 57561
const UNION = 57562
const UNIQUE = 57563
const UNKNOWN = 57564
const UPDATE = 57565
const USER = 57566
const USING = 57567
const VALID = 57568
const VALIDATE = 57569
const VALUE = 57570
const VALUES = 57571
const VARCHAR = 57572
const VARIADIC = 57573
const VARYING = 57574
const WHEN = 57575
const WHERE = 57576
const WINDOW = 57577
const WITH = 57578
const WITHIN = 57579
const WITHOUT = 57580
const YEAR = 57581
const ZONE = 57582
const NOT_LA = 57583
const WITH_LA = 57584
const POSTFIXOP = 57585
const UMINUS = 57586

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlMaxDepth = 200

//line sql.y:3695

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 19,
	263, 19,
	-2, 289,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 29,
	1, 260,
	151, 260,
	261, 260,
	263, 260,
	-2, 270,
	-1, 38,
	1, 263,
	151, 263,
	261, 263,
	263, 263,
	-2, 269,
	-1, 47,
	1, 19,
	263, 19,
	-2, 289,
	-1, 83,
	1, 127,
	263, 127,
	-2, 763,
	-1, 234,
	129, 299,
	150, 299,
	-2, 266,
	-1, 237,
	129, 298,
	150, 298,
	-2, 264,
	-1, 339,
	129, 298,
	150, 298,
	-2, 267,
	-1, 397,
	260, 713,
	-2, 708,
	-1, 398,
	260, 714,
	-2, 709,
	-1, 404,
	6, 417,
	260, 417,
	-2, 836,
	-1, 426,
	6, 387,
	-2, 815,
	-1, 427,
	6, 414,
	260, 414,
	-2, 816,
	-1, 428,
	6, 395,
	-2, 817,
	-1, 429,
	6, 394,
	-2, 818,
	-1, 430,
	6, 414,
	260, 414,
	-2, 820,
	-1, 431,
	6, 414,
	260, 414,
	-2, 821,
	-1, 432,
	6, 415,
	-2, 823,
	-1, 433,
	6, 382,
	-2, 824,
	-1, 434,
	6, 382,
	-2, 825,
	-1, 435,
	6, 397,
	-2, 828,
	-1, 436,
	6, 383,
	-2, 833,
	-1, 437,
	6, 384,
	-2, 834,
	-1, 438,
	6, 385,
	-2, 835,
	-1, 439,
	6, 382,
	-2, 839,
	-1, 440,
	6, 388,
	-2, 844,
	-1, 441,
	6, 386,
	-2, 846,
	-1, 442,
	6, 416,
	-2, 850,
	-1, 443,
	6, 412,
	260, 412,
	-2, 854,
	-1, 687,
	85, 270,
	116, 270,
	129, 270,
	150, 270,
	154, 270,
	220, 270,
	-2, 522,
	-1, 695,
	260, 693,
	-2, 687,
	-1, 880,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 450,
	-1, 881,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 451,
	-1, 882,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 452,
	-1, 886,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 456,
	-1, 887,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 457,
	-1, 888,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 458,
	-1, 891,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 463,
	-1, 926,
	159, 592,
	-2, 595,
	-1, 1072,
	85, 270,
	116, 270,
	129, 270,
	150, 270,
	154, 270,
	220, 270,
	-2, 340,
	-1, 1080,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 464,
	-1, 1085,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 465,
	-1, 1106,
	159, 591,
	-2, 594,
	-1, 1243,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 466,
	-1, 1248,
	119, 0,
	-2, 476,
	-1, 1258,
	159, 593,
	-2, 596,
	-1, 1298,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 503,
	-1, 1299,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 504,
	-1, 1300,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 505,
	-1, 1304,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 509,
	-1, 1305,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 510,
	-1, 1306,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 511,
	-1, 1398,
	119, 0,
	-2, 477,
	-1, 1402,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 480,
	-1, 1403,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 482,
	-1, 1483,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 481,
	-1, 1484,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 483,
	-1, 1492,
	119, 0,
	-2, 512,
	-1, 1529,
	119, 0,
	-2, 513,
	-1, 1574,
	30, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 814,
}

const sqlNprod = 946
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 18324

var sqlAct = [...]int{

	923, 1556, 1573, 1534, 1594, 766, 1558, 1572, 1440, 1557,
	821, 1500, 773, 238, 1278, 1369, 1370, 396, 395, 1473,
	1336, 1384, 690, 388, 1250, 1249, 1068, 1465, 829, 981,
	265, 456, 808, 642, 1378, 243, 28, 1223, 692, 1164,
	1163, 805, 1109, 1060, 622, 84, 939, 1232, 807, 774,
	461, 482, 743, 13, 752, 1056, 907, 943, 904, 721,
	933, 28, 725, 1071, 832, 245, 37, 18, 638, 500,
	466, 10, 492, 464, 6, 644, 369, 830, 978, 59,
	802, 360, 237, 28, 511, 286, 810, 57, 248, 527,
	282, 37, 342, 61, 88, 38, 343, 60, 491, 341,
	62, 39, 284, 502, 444, 81, 498, 66, 1467, 242,
	459, 767, 459, 37, 457, 353, 457, 458, 647, 458,
	275, 1570, 936, 261, 1464, 484, 268, 1564, 279, 1563,
	825, 276, 825, 235, 1555, 242, 649, 1401, 674, 234,
	771, 1029, 645, 287, 1550, 484, 1531, 825, 647, 1401,
	665, 666, 667, 290, 648, 1102, 937, 1522, 647, 1525,
	662, 1513, 825, 291, 825, 1311, 649, 1510, 674, 1485,
	1464, 1480, 1401, 1257, 825, 1463, 649, 1460, 1464, 1445,
	825, 645, 825, 43, 648, 1444, 938, 935, 825, 1425,
	662, 1040, 1102, 1405, 648, 1400, 1102, 741, 1401, 1346,
	45, 1253, 825, 1214, 1102, 1210, 483, 1181, 483, 1179,
	1182, 1178, 1102, 1058, 1102, 1177, 675, 1106, 1102, 1108,
	1102, 1104, 1103, 43, 1042, 46, 1105, 1102, 825, 483,
	487, 1136, 41, 1152, 1153, 1154, 670, 940, 42, 826,
	45, 663, 825, 1397, 740, 1102, 675, 739, 340, 489,
	919, 820, 490, 43, 796, 646, 40, 361, 361, 354,
	526, 307, 485, 260, 47, 46, 670, 462, 321, 1571,
	45, 663, 41, 1149, 1569, 1526, 334, 339, 42, 1462,
	1430, 663, 485, 1426, 1418, 1417, 1412, 455, 1411, 1410,
	934, 451, 664, 1409, 1395, 46, 58, 647, 1326, 1321,
	43, 672, 41, 1363, 1320, 1319, 333, 1261, 42, 1029,
	1238, 1078, 1044, 1222, 1184, 649, 1183, 45, 1171, 1162,
	459, 1135, 664, 1501, 457, 1132, 770, 458, 1130, 1119,
	1113, 672, 664, 648, 1041, 993, 950, 949, 698, 916,
	1155, 235, 46, 353, 352, 630, 632, 234, 646, 671,
	483, 276, 639, 1280, 1150, 658, 655, 656, 657, 650,
	651, 652, 653, 654, 1521, 680, 681, 682, 683, 684,
	619, 1502, 1494, 40, 1476, 688, 1470, 1459, 1437, 671,
	1423, 659, 660, 661, 618, 658, 655, 656, 657, 650,
	651, 652, 653, 654, 475, 701, 655, 656, 657, 650,
	651, 652, 653, 654, 689, 1151, 695, 496, 290, 290,
	1389, 1367, 1362, 1247, 1237, 495, 530, 917, 291, 291,
	522, 515, 1393, 614, 1220, 1219, 531, 1217, 611, 1196,
	1195, 615, 1161, 616, 1127, 1126, 628, 1136, 1118, 627,
	626, 1099, 235, 640, 1098, 235, 235, 1093, 634, 909,
	726, 635, 636, 729, 1007, 1006, 988, 948, 824, 647,
	738, 731, 647, 1007, 1146, 1147, 1148, 719, 1145, 1142,
	1143, 1144, 1137, 1138, 1139, 1140, 1141, 649, 718, 717,
	649, 1482, 390, 716, 715, 714, 713, 734, 712, 711,
	723, 724, 710, 709, 708, 648, 707, 727, 648, 706,
	746, 647, 730, 705, 696, 694, 40, 620, 266, 357,
	1481, 693, 28, 1240, 647, 1239, 359, 452, 1365, 649,
	1136, 757, 759, 1030, 363, 28, 732, 703, 789, 315,
	769, 1079, 649, 783, 284, 246, 346, 648, 650, 651,
	652, 653, 654, 59, 328, 316, 1379, 735, 737, 762,
	648, 1136, 530, 530, 749, 37, 662, 61, 398, 782,
	446, 60, 531, 531, 62, 767, 788, 1281, 1122, 944,
	520, 508, 519, 722, 513, 287, 786, 785, 255, 784,
	1026, 1540, 663, 51, 1584, 290, 1136, 1583, 311, 87,
	1354, 225, 699, 1036, 1453, 291, 1452, 1136, 1208, 1188,
	87, 87, 1187, 1117, 87, 1116, 1115, 87, 87, 87,
	1509, 1114, 87, 87, 87, 87, 801, 289, 1081, 52,
	896, 530, 787, 745, 663, 764, 745, 763, 1149, 1207,
	870, 531, 744, 664, 906, 87, 87, 663, 229, 906,
	523, 1542, 313, 753, 478, 940, 1591, 361, 232, 484,
	827, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 835, 1392, 1150, 664, 445, 314, 1137, 1138,
	1139, 1140, 1141, 525, 913, 403, 448, 1021, 664, 911,
	1508, 473, 1198, 472, 869, 756, 524, 804, 1442, 657,
	650, 651, 652, 653, 654, 652, 653, 654, 951, 1150,
	962, 1503, 972, 974, 979, 982, 983, 984, 1270, 944,
	1150, 1552, 734, 920, 925, 1151, 928, 734, 834, 1037,
	53, 1583, 924, 467, 720, 468, 1553, 1125, 992, 936,
	462, 973, 650, 651, 652, 653, 654, 985, 986, 987,
	1490, 658, 655, 656, 657, 650, 651, 652, 653, 654,
	1151, 1035, 915, 1139, 1140, 1141, 755, 914, 1022, 940,
	1233, 1151, 530, 937, 450, 1004, 685, 349, 350, 242,
	1136, 1002, 531, 355, 230, 1205, 485, 87, 742, 87,
	996, 87, 1137, 1138, 1139, 1140, 1141, 469, 1559, 521,
	1582, 233, 1199, 938, 935, 467, 87, 468, 1590, 954,
	1083, 1580, 997, 331, 54, 905, 241, 514, 509, 447,
	754, 639, 87, 1145, 1142, 1143, 1144, 1137, 1138, 1139,
	1140, 1141, 87, 87, 1032, 87, 1017, 1144, 1137, 1138,
	1139, 1140, 1141, 1025, 1443, 1377, 49, 240, 467, 1028,
	468, 1031, 818, 819, 940, 55, 1043, 1024, 814, 1045,
	28, 1039, 1074, 912, 1059, 87, 1038, 87, 1033, 469,
	633, 1034, 289, 289, 324, 1560, 957, 308, 1051, 1589,
	529, 87, 345, 87, 87, 242, 87, 50, 306, 1049,
	37, 290, 1053, 1080, 1067, 87, 1052, 1085, 1073, 1054,
	344, 291, 1077, 1150, 1267, 1063, 1342, 934, 1447, 400,
	958, 894, 469, 87, 1421, 1350, 87, 727, 1066, 730,
	1101, 345, 1604, 1307, 1446, 1597, 724, 723, 1061, 792,
	1110, 1435, 1190, 1064, 1268, 793, 1343, 1353, 1561, 1096,
	959, 956, 1107, 470, 1352, 1123, 1062, 1100, 795, 1128,
	56, 239, 1084, 1082, 1151, 67, 794, 1001, 1386, 815,
	1111, 1112, 1018, 625, 621, 1266, 1535, 344, 1436, 617,
	688, 1562, 647, 964, 497, 72, 979, 979, 979, 1009,
	68, 1008, 48, 1349, 1422, 940, 1065, 1308, 1387, 895,
	649, 960, 1603, 1309, 1228, 1227, 1186, 312, 69, 1160,
	1121, 274, 329, 1090, 1338, 465, 1339, 1193, 648, 892,
	1173, 71, 1351, 87, 1088, 470, 529, 529, 1142, 1143,
	1144, 1137, 1138, 1139, 1140, 1141, 87, 1595, 240, 1341,
	87, 462, 1385, 87, 1211, 1344, 336, 87, 1224, 87,
	87, 1194, 87, 1057, 955, 87, 87, 87, 1185, 289,
	902, 947, 87, 87, 1168, 1169, 1170, 1493, 470, 1166,
	1192, 900, 1596, 1420, 1165, 1202, 1246, 1204, 1131, 1086,
	1092, 1206, 790, 1091, 893, 645, 327, 1598, 325, 1212,
	1242, 1213, 1243, 1340, 322, 529, 70, 1226, 273, 1218,
	1229, 1216, 704, 1248, 613, 663, 946, 1333, 1342, 1254,
	1337, 1203, 1201, 1259, 1059, 1189, 1230, 1047, 1335, 1259,
	816, 813, 1234, 1235, 898, 488, 897, 486, 481, 474,
	903, 471, 73, 1276, 1263, 1264, 1265, 1275, 1343, 1255,
	841, 1454, 1285, 822, 1584, 1287, 517, 1063, 318, 371,
	1087, 347, 745, 745, 1260, 1063, 664, 1089, 760, 758,
	1066, 1456, 761, 1209, 1284, 1467, 1505, 1528, 1066, 258,
	1231, 1288, 1269, 1271, 1272, 1064, 1316, 1317, 1061, 63,
	1282, 75, 87, 1064, 1286, 1323, 1324, 1325, 87, 87,
	3, 1225, 351, 1523, 823, 262, 1062, 899, 262, 772,
	271, 1312, 1318, 262, 901, 281, 1338, 74, 1339, 641,
	1076, 348, 1322, 1314, 87, 1315, 319, 87, 860, 658,
	655, 656, 657, 650, 651, 652, 653, 654, 1065, 259,
	1601, 1341, 1332, 1328, 1602, 1380, 1065, 1344, 267, 1347,
	1348, 214, 224, 841, 647, 965, 529, 383, 1375, 1374,
	1136, 647, 647, 1394, 1376, 223, 28, 1398, 309, 310,
	1327, 1366, 1402, 1403, 1273, 1381, 1382, 1383, 1406, 649,
	1388, 1368, 1241, 1408, 1364, 1391, 226, 227, 85, 797,
	648, 1390, 798, 1399, 1180, 1340, 216, 648, 1413, 249,
	249, 991, 1416, 264, 990, 989, 264, 270, 264, 941,
	799, 264, 277, 264, 85, 215, 217, 1407, 1274, 800,
	697, 87, 87, 87, 228, 1441, 65, 87, 612, 323,
	87, 860, 1424, 1414, 85, 85, 87, 87, 87, 87,
	87, 1551, 87, 87, 859, 1124, 1419, 218, 1489, 87,
	1472, 87, 945, 840, 862, 702, 219, 87, 23, 1372,
	376, 1334, 1191, 809, 532, 518, 87, 507, 399, 87,
	326, 501, 510, 1448, 953, 289, 449, 401, 838, 402,
	839, 728, 389, 1431, 836, 285, 1432, 775, 262, 910,
	87, 942, 87, 87, 1469, 87, 1120, 700, 1455, 1449,
	1375, 1374, 375, 1434, 87, 381, 1376, 1477, 380, 87,
	87, 921, 87, 372, 1466, 79, 1457, 1483, 1484, 80,
	1468, 1461, 1023, 453, 1136, 1475, 1361, 1450, 1451, 768,
	817, 629, 1200, 262, 477, 231, 1478, 1133, 971, 963,
	961, 332, 1488, 1479, 460, 776, 1486, 859, 1497, 965,
	965, 358, 220, 320, 952, 221, 840, 862, 1499, 222,
	828, 1075, 356, 637, 257, 256, 281, 806, 281, 1495,
	317, 791, 679, 476, 1498, 676, 330, 1504, 1539, 1197,
	462, 44, 17, 16, 281, 15, 264, 861, 85, 1512,
	337, 14, 1514, 12, 11, 1050, 1516, 9, 8, 1518,
	7, 1515, 1375, 1374, 22, 249, 21, 20, 1376, 5,
	4, 965, 965, 965, 2, 1, 0, 0, 734, 0,
	1520, 264, 0, 1527, 0, 0, 0, 0, 0, 0,
	1524, 264, 264, 1517, 479, 0, 1543, 0, 0, 0,
	1530, 0, 1544, 0, 0, 0, 0, 1150, 0, 0,
	0, 0, 0, 0, 1546, 1536, 1537, 1547, 1549, 1375,
	1374, 1566, 1548, 0, 264, 1376, 264, 1545, 0, 0,
	1565, 1541, 0, 1577, 1577, 1567, 1568, 837, 1554, 0,
	85, 1578, 264, 85, 1579, 85, 87, 0, 1581, 1585,
	861, 0, 0, 1586, 624, 1577, 841, 1588, 1151, 1587,
	0, 0, 0, 0, 0, 0, 0, 1600, 87, 1599,
	0, 0, 249, 0, 733, 643, 0, 0, 0, 87,
	0, 87, 1577, 87, 1605, 0, 87, 965, 965, 0,
	0, 262, 841, 0, 765, 0, 0, 87, 777, 841,
	87, 0, 0, 781, 0, 0, 281, 0, 87, 0,
	0, 87, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 1145, 1142, 1143, 1144, 1137, 1138, 1139, 1140, 1141,
	841, 0, 0, 0, 860, 0, 0, 0, 0, 0,
	837, 0, 965, 965, 965, 965, 965, 965, 965, 965,
	965, 965, 965, 965, 965, 965, 965, 965, 965, 965,
	0, 965, 0, 0, 87, 0, 0, 0, 0, 0,
	860, 0, 264, 0, 0, 0, 0, 860, 0, 0,
	64, 0, 0, 0, 0, 750, 0, 0, 0, 264,
	0, 0, 264, 0, 0, 0, 264, 0, 779, 780,
	0, 264, 0, 0, 264, 85, 85, 0, 860, 0,
	841, 264, 643, 0, 0, 0, 0, 0, 67, 0,
	0, 0, 0, 0, 0, 0, 87, 87, 87, 0,
	0, 0, 0, 0, 87, 87, 0, 0, 72, 262,
	87, 0, 87, 68, 87, 87, 87, 87, 0, 0,
	859, 0, 0, 0, 0, 0, 87, 0, 87, 840,
	862, 69, 0, 0, 0, 262, 87, 87, 0, 0,
	87, 0, 0, 0, 71, 0, 87, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 859, 0, 860, 0,
	0, 0, 0, 859, 0, 840, 862, 0, 0, 0,
	0, 0, 840, 862, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 841, 0, 87,
	0, 0, 0, 0, 859, 0, 0, 0, 0, 0,
	0, 803, 0, 840, 862, 0, 0, 264, 750, 0,
	0, 377, 29, 0, 0, 0, 0, 0, 965, 70,
	0, 0, 0, 0, 0, 0, 0, 0, 1094, 1095,
	0, 0, 998, 264, 841, 0, 85, 29, 0, 0,
	0, 0, 87, 0, 87, 0, 87, 0, 0, 236,
	0, 0, 244, 87, 0, 73, 841, 0, 0, 29,
	281, 0, 0, 861, 0, 860, 0, 0, 281, 0,
	244, 0, 0, 0, 859, 0, 87, 0, 0, 0,
	0, 0, 0, 840, 862, 0, 87, 0, 87, 0,
	1157, 1158, 1159, 0, 0, 965, 87, 0, 87, 861,
	0, 0, 0, 0, 1046, 0, 861, 0, 0, 0,
	0, 0, 860, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 0, 0, 0, 841, 0, 0,
	264, 999, 1000, 0, 860, 0, 750, 861, 0, 1005,
	0, 0, 0, 0, 0, 1010, 1011, 1013, 1015, 1016,
	0, 1019, 1020, 837, 0, 0, 0, 0, 264, 0,
	1027, 87, 87, 0, 0, 87, 264, 0, 965, 0,
	0, 0, 0, 0, 0, 803, 87, 0, 803, 0,
	0, 859, 0, 0, 0, 87, 0, 0, 0, 837,
	840, 862, 0, 0, 0, 0, 837, 0, 0, 624,
	0, 85, 264, 0, 1048, 860, 1244, 1245, 0, 0,
	87, 87, 87, 1055, 87, 0, 0, 861, 1070, 1070,
	0, 264, 0, 0, 0, 0, 0, 837, 859, 0,
	0, 87, 0, 0, 0, 0, 0, 840, 862, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	859, 87, 0, 0, 0, 0, 0, 236, 0, 840,
	862, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
	1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 0,
	1310, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 647, 0,
	665, 666, 667, 0, 0, 0, 0, 837, 0, 0,
	668, 0, 0, 0, 0, 0, 649, 0, 674, 777,
	0, 859, 0, 0, 861, 0, 0, 0, 0, 0,
	840, 862, 0, 0, 648, 0, 0, 0, 0, 0,
	662, 0, 0, 0, 0, 0, 0, 0, 262, 0,
	0, 262, 0, 0, 0, 0, 0, 0, 236, 0,
	0, 236, 236, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 686, 0, 0, 0, 687, 0, 0, 0,
	691, 0, 0, 861, 0, 643, 675, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 673, 0, 0,
	0, 0, 0, 0, 837, 0, 670, 264, 0, 0,
	0, 663, 0, 0, 0, 0, 0, 0, 1215, 0,
	750, 0, 624, 0, 0, 1221, 0, 0, 0, 0,
	0, 669, 0, 0, 0, 0, 264, 0, 0, 264,
	0, 0, 0, 0, 0, 0, 0, 1236, 0, 0,
	1070, 837, 0, 0, 861, 0, 0, 1438, 0, 0,
	0, 0, 664, 0, 0, 0, 0, 0, 0, 0,
	0, 672, 0, 837, 0, 0, 0, 0, 29, 0,
	0, 0, 0, 0, 0, 1357, 0, 0, 0, 0,
	0, 29, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1279, 0, 0, 0, 262, 262, 0,
	0, 262, 0, 0, 0, 0, 0, 0, 0, 671,
	0, 659, 660, 661, 0, 658, 655, 656, 657, 650,
	651, 652, 653, 654, 1492, 0, 0, 0, 0, 0,
	0, 0, 1427, 0, 837, 0, 0, 0, 0, 0,
	0, 647, 0, 665, 666, 667, 0, 0, 0, 0,
	0, 0, 0, 668, 0, 1330, 1331, 750, 0, 649,
	0, 674, 0, 643, 643, 0, 0, 0, 0, 1355,
	0, 1356, 0, 264, 1358, 1359, 1360, 648, 0, 0,
	0, 0, 0, 662, 0, 643, 0, 750, 1371, 0,
	0, 0, 0, 0, 0, 264, 264, 1529, 0, 264,
	0, 0, 0, 0, 0, 643, 1070, 0, 0, 0,
	0, 0, 0, 0, 1439, 0, 0, 0, 647, 0,
	665, 666, 667, 0, 0, 0, 0, 0, 0, 0,
	668, 0, 0, 0, 0, 0, 649, 831, 674, 675,
	0, 0, 0, 0, 0, 0, 0, 1471, 1415, 0,
	673, 0, 0, 0, 648, 0, 0, 262, 0, 670,
	662, 0, 0, 0, 663, 0, 0, 908, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 669, 0, 0, 0, 0, 0,
	1136, 0, 1152, 1153, 1154, 0, 0, 0, 0, 0,
	0, 750, 1396, 1433, 0, 85, 1136, 0, 1152, 1153,
	1154, 0, 264, 0, 0, 664, 675, 0, 1252, 0,
	0, 0, 0, 0, 672, 0, 0, 673, 0, 0,
	1371, 0, 1149, 0, 0, 643, 670, 0, 0, 0,
	0, 663, 0, 0, 0, 264, 0, 1474, 1149, 0,
	0, 0, 0, 0, 0, 264, 0, 643, 0, 0,
	0, 669, 244, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 671, 1538, 659, 660, 661, 0, 658, 655,
	656, 657, 650, 651, 652, 653, 654, 0, 0, 0,
	994, 0, 664, 0, 0, 0, 0, 995, 0, 1155,
	0, 672, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 777, 1150, 0, 1155, 29, 19, 0, 0,
	1506, 1507, 0, 0, 1511, 1072, 0, 32, 0, 1150,
	0, 0, 1371, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 643, 0, 0, 0, 33, 671,
	0, 659, 660, 661, 36, 658, 655, 656, 657, 650,
	651, 652, 653, 654, 1151, 0, 0, 0, 0, 643,
	643, 264, 1176, 85, 0, 0, 0, 0, 0, 24,
	1151, 0, 0, 0, 0, 25, 0, 908, 0, 1371,
	1474, 0, 0, 0, 0, 0, 0, 26, 0, 0,
	0, 687, 1097, 0, 0, 0, 0, 0, 0, 0,
	264, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1146, 1147, 1148, 0, 1145, 1142, 1143,
	1144, 1137, 1138, 1139, 1140, 1141, 0, 0, 0, 1146,
	1147, 1148, 0, 1145, 1142, 1143, 1144, 1137, 1138, 1139,
	1140, 1141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 687, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 27, 0, 34, 0,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 30,
	31, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 35, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 46, 0, 0,
	0, 0, 0, 0, 41, 0, 0, 0, 0, 0,
	42, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	831, 0, 0, 831, 0, 0, 0, 0, 40, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 397, 385, 386, 387, 384, 373, 0,
	0, 0, 0, 0, 0, 89, 90, 930, 91, 0,
	687, 0, 0, 379, 0, 0, 0, 92, 93, 174,
	426, 427, 94, 428, 429, 0, 95, 179, 96, 394,
	412, 430, 431, 0, 422, 0, 405, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 294, 102, 103, 0,
	406, 408, 0, 407, 409, 104, 105, 106, 107, 432,
	108, 433, 434, 0, 0, 109, 0, 931, 0, 425,
	111, 0, 0, 0, 0, 378, 112, 413, 392, 0,
	113, 114, 435, 115, 0, 0, 0, 295, 0, 116,
	423, 0, 190, 0, 117, 419, 421, 0, 0, 0,
	296, 118, 436, 437, 438, 0, 404, 0, 297, 119,
	298, 120, 0, 0, 424, 299, 121, 300, 0, 250,
	0, 0, 29, 122, 123, 124, 125, 251, 301, 126,
	127, 367, 128, 393, 420, 129, 439, 130, 131, 831,
	831, 0, 0, 831, 132, 200, 302, 133, 303, 414,
	134, 135, 0, 415, 136, 203, 0, 137, 138, 440,
	139, 140, 0, 141, 142, 143, 0, 144, 304, 145,
	146, 382, 147, 0, 148, 149, 0, 150, 252, 410,
	151, 152, 305, 153, 441, 154, 0, 155, 157, 207,
	156, 416, 0, 0, 158, 159, 0, 254, 442, 0,
	0, 253, 417, 418, 391, 160, 161, 162, 163, 0,
	370, 164, 165, 411, 0, 166, 167, 168, 212, 443,
	929, 169, 0, 0, 0, 0, 170, 171, 172, 173,
	368, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	364, 365, 932, 0, 0, 0, 366, 0, 0, 374,
	927, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 528, 0, 0, 0, 0, 0, 0, 0, 831,
	0, 0, 0, 89, 90, 533, 91, 534, 535, 536,
	537, 538, 539, 540, 541, 92, 93, 174, 175, 176,
	94, 177, 178, 542, 95, 179, 96, 543, 544, 180,
	181, 545, 182, 546, 293, 547, 97, 98, 99, 0,
	100, 548, 101, 549, 294, 102, 103, 550, 551, 552,
	553, 554, 555, 104, 105, 106, 107, 183, 108, 184,
	185, 556, 557, 109, 558, 559, 560, 110, 111, 561,
	562, 687, 563, 186, 112, 187, 564, 565, 113, 114,
	188, 115, 566, 567, 568, 295, 569, 116, 189, 570,
	190, 571, 117, 191, 192, 572, 573, 574, 296, 118,
	193, 194, 195, 575, 196, 576, 297, 119, 298, 120,
	577, 578, 197, 299, 121, 300, 579, 250, 580, 581,
	0, 122, 123, 124, 125, 251, 301, 126, 127, 582,
	128, 583, 198, 129, 199, 130, 131, 584, 585, 586,
	587, 588, 132, 200, 302, 133, 303, 201, 134, 135,
	589, 202, 136, 203, 590, 137, 138, 204, 139, 140,
	591, 141, 142, 143, 592, 144, 304, 145, 146, 205,
	147, 0, 148, 149, 593, 150, 252, 594, 151, 152,
	305, 153, 206, 154, 595, 155, 157, 207, 156, 208,
	596, 597, 158, 159, 598, 254, 209, 599, 600, 253,
	210, 211, 601, 160, 161, 162, 163, 602, 603, 164,
	165, 604, 605, 166, 167, 168, 212, 213, 606, 169,
	607, 608, 609, 610, 170, 171, 172, 173, 0, 528,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	736, 89, 90, 533, 91, 534, 535, 536, 537, 538,
	539, 540, 541, 92, 93, 174, 175, 176, 94, 177,
	178, 542, 95, 179, 96, 543, 544, 180, 181, 545,
	182, 546, 293, 547, 97, 98, 99, 0, 100, 548,
	101, 549, 294, 102, 103, 550, 551, 552, 553, 554,
	555, 104, 105, 106, 107, 183, 108, 184, 185, 556,
	557, 109, 558, 559, 560, 110, 111, 561, 562, 0,
	563, 186, 112, 187, 564, 565, 113, 114, 188, 115,
	566, 567, 568, 295, 569, 116, 189, 570, 190, 571,
	117, 191, 192, 572, 573, 574, 296, 118, 193, 194,
	195, 575, 196, 576, 297, 119, 298, 120, 577, 578,
	197, 299, 121, 300, 579, 250, 580, 581, 0, 122,
	123, 124, 125, 251, 301, 126, 127, 582, 128, 583,
	198, 129, 199, 130, 131, 584, 585, 586, 587, 588,
	132, 200, 302, 133, 303, 201, 134, 135, 589, 202,
	136, 203, 590, 137, 138, 204, 139, 140, 591, 141,
	142, 143, 592, 144, 304, 145, 146, 205, 147, 0,
	148, 149, 593, 150, 252, 594, 151, 152, 305, 153,
	206, 154, 595, 155, 157, 207, 156, 208, 596, 597,
	158, 159, 598, 254, 209, 599, 600, 253, 210, 211,
	601, 160, 161, 162, 163, 602, 603, 164, 165, 604,
	605, 166, 167, 168, 212, 213, 606, 169, 607, 608,
	609, 610, 170, 171, 172, 173, 397, 385, 386, 387,
	384, 373, 0, 0, 0, 0, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 0, 379, 0, 0, 0,
	92, 93, 174, 426, 427, 94, 428, 429, 0, 95,
	179, 96, 394, 412, 430, 431, 0, 422, 0, 405,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 294,
	102, 103, 0, 406, 408, 0, 407, 409, 104, 105,
	106, 107, 432, 108, 433, 434, 463, 0, 109, 0,
	0, 0, 425, 111, 0, 0, 0, 0, 378, 112,
	413, 392, 0, 113, 114, 435, 115, 0, 0, 0,
	295, 0, 116, 423, 0, 190, 0, 117, 419, 421,
	0, 0, 0, 296, 118, 436, 437, 438, 0, 404,
	0, 297, 119, 298, 120, 0, 0, 424, 299, 121,
	300, 0, 250, 0, 0, 0, 122, 123, 124, 125,
	251, 301, 126, 127, 367, 128, 393, 420, 129, 439,
	130, 131, 0, 0, 0, 0, 0, 132, 200, 302,
	133, 303, 414, 134, 135, 0, 415, 136, 203, 0,
	137, 138, 440, 139, 140, 0, 141, 142, 143, 0,
	144, 304, 145, 146, 382, 147, 0, 148, 149, 43,
	150, 252, 410, 151, 152, 305, 153, 441, 154, 0,
	155, 157, 207, 156, 416, 0, 45, 158, 159, 0,
	254, 442, 0, 0, 253, 417, 418, 391, 160, 161,
	162, 163, 0, 370, 164, 165, 411, 0, 166, 167,
	168, 292, 443, 0, 169, 0, 0, 0, 41, 170,
	171, 172, 173, 368, 42, 397, 385, 386, 387, 384,
	373, 0, 0, 364, 365, 0, 0, 89, 90, 366,
	91, 0, 374, 0, 0, 379, 0, 0, 0, 92,
	93, 174, 426, 427, 94, 428, 429, 0, 95, 179,
	96, 394, 412, 430, 431, 0, 422, 0, 405, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 294, 102,
	103, 0, 406, 408, 0, 407, 409, 104, 105, 106,
	107, 432, 108, 433, 434, 0, 0, 109, 0, 0,
	0, 425, 111, 0, 0, 0, 0, 378, 112, 413,
	392, 0, 113, 114, 435, 115, 0, 0, 0, 295,
	0, 116, 423, 0, 190, 0, 117, 419, 421, 0,
	0, 0, 296, 118, 436, 437, 438, 0, 404, 0,
	297, 119, 298, 120, 0, 0, 424, 299, 121, 300,
	0, 250, 0, 0, 0, 122, 123, 124, 125, 251,
	301, 126, 127, 367, 128, 393, 420, 129, 439, 130,
	131, 0, 0, 0, 0, 0, 132, 200, 302, 133,
	303, 414, 134, 135, 0, 415, 136, 203, 0, 137,
	138, 440, 139, 140, 0, 141, 142, 143, 0, 144,
	304, 145, 146, 382, 147, 0, 148, 149, 43, 150,
	252, 410, 151, 152, 305, 153, 441, 154, 0, 155,
	157, 207, 156, 416, 0, 45, 158, 159, 0, 254,
	442, 0, 0, 253, 417, 418, 391, 160, 161, 162,
	163, 0, 370, 164, 165, 411, 0, 166, 167, 168,
	292, 443, 0, 169, 0, 0, 0, 41, 170, 171,
	172, 173, 368, 42, 397, 385, 386, 387, 384, 373,
	0, 0, 364, 365, 0, 0, 89, 90, 366, 91,
	0, 374, 0, 0, 379, 0, 0, 0, 92, 93,
	174, 426, 427, 94, 428, 429, 975, 95, 179, 96,
	394, 412, 430, 431, 0, 422, 0, 405, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 294, 102, 103,
	0, 406, 408, 0, 407, 409, 104, 105, 106, 107,
	432, 108, 433, 434, 0, 0, 109, 0, 0, 0,
	425, 111, 0, 0, 0, 0, 378, 112, 413, 392,
	0, 113, 114, 435, 115, 0, 0, 980, 295, 0,
	116, 423, 0, 190, 0, 117, 419, 421, 0, 0,
	0, 296, 118, 436, 437, 438, 0, 404, 0, 297,
	119, 298, 120, 0, 976, 424, 299, 121, 300, 0,
	250, 0, 0, 0, 122, 123, 124, 125, 251, 301,
	126, 127, 367, 128, 393, 420, 129, 439, 130, 131,
	0, 0, 0, 0, 0, 132, 200, 302, 133, 303,
	414, 134, 135, 0, 415, 136, 203, 0, 137, 138,
	440, 139, 140, 0, 141, 142, 143, 0, 144, 304,
	145, 146, 382, 147, 0, 148, 149, 0, 150, 252,
	410, 151, 152, 305, 153, 441, 154, 0, 155, 157,
	207, 156, 416, 0, 0, 158, 159, 0, 254, 442,
	0, 977, 253, 417, 418, 391, 160, 161, 162, 163,
	0, 370, 164, 165, 411, 0, 166, 167, 168, 212,
	443, 0, 169, 0, 0, 0, 0, 170, 171, 172,
	173, 368, 0, 397, 385, 386, 387, 384, 373, 0,
	0, 364, 365, 0, 0, 89, 90, 366, 91, 0,
	374, 0, 0, 379, 0, 0, 0, 92, 93, 174,
	426, 427, 94, 428, 429, 0, 95, 179, 96, 394,
	412, 430, 431, 0, 422, 0, 405, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 294, 102, 103, 0,
	406, 408, 0, 407, 409, 104, 105, 106, 107, 432,
	108, 433, 434, 0, 0, 109, 0, 0, 0, 425,
	111, 0, 0, 0, 0, 378, 112, 413, 392, 0,
	113, 114, 435, 115, 0, 0, 0, 295, 0, 116,
	423, 0, 190, 0, 117, 419, 421, 0, 0, 0,
	296, 118, 436, 437, 438, 0, 404, 0, 297, 119,
	298, 120, 0, 0, 424, 299, 121, 300, 0, 250,
	0, 0, 0, 122, 123, 124, 125, 251, 301, 126,
	127, 367, 128, 393, 420, 129, 439, 130, 131, 0,
	0, 0, 0, 0, 132, 200, 302, 133, 303, 414,
	134, 135, 0, 415, 136, 203, 0, 137, 138, 440,
	139, 140, 0, 141, 142, 143, 0, 144, 304, 145,
	146, 382, 147, 0, 148, 149, 0, 150, 252, 410,
	151, 152, 305, 153, 441, 154, 0, 155, 157, 207,
	156, 416, 0, 0, 158, 159, 0, 254, 442, 0,
	0, 253, 417, 418, 391, 160, 161, 162, 163, 0,
	370, 164, 165, 411, 0, 166, 167, 168, 212, 443,
	0, 169, 0, 0, 0, 0, 170, 171, 172, 173,
	368, 0, 397, 385, 386, 387, 384, 373, 0, 0,
	364, 365, 0, 0, 89, 90, 366, 91, 0, 374,
	1313, 0, 379, 0, 0, 0, 92, 93, 174, 426,
	427, 94, 428, 429, 0, 95, 179, 96, 394, 412,
	430, 431, 0, 422, 0, 405, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 294, 102, 103, 0, 406,
	408, 0, 407, 409, 104, 105, 106, 107, 432, 108,
	433, 434, 0, 0, 109, 0, 0, 0, 425, 111,
	0, 0, 0, 0, 378, 112, 413, 392, 0, 113,
	114, 435, 115, 0, 0, 0, 295, 0, 116, 423,
	0, 190, 0, 117, 419, 421, 0, 0, 0, 296,
	118, 436, 437, 438, 0, 404, 0, 297, 119, 298,
	120, 0, 0, 424, 299, 121, 300, 0, 250, 0,
	0, 0, 122, 123, 124, 125, 251, 301, 126, 127,
	367, 128, 393, 420, 129, 439, 130, 131, 0, 0,
	0, 0, 0, 132, 200, 302, 133, 303, 414, 134,
	135, 0, 415, 136, 203, 0, 137, 138, 440, 139,
	140, 0, 141, 142, 143, 0, 144, 304, 145, 146,
	382, 147, 0, 148, 149, 0, 150, 252, 410, 151,
	152, 305, 153, 441, 154, 0, 155, 157, 207, 156,
	416, 0, 0, 158, 159, 0, 254, 442, 0, 0,
	253, 417, 418, 391, 160, 161, 162, 163, 0, 370,
	164, 165, 411, 0, 166, 167, 168, 212, 443, 0,
	169, 0, 0, 0, 0, 170, 171, 172, 173, 368,
	0, 397, 385, 386, 387, 384, 373, 0, 0, 364,
	365, 0, 0, 89, 90, 366, 91, 0, 374, 1256,
	0, 379, 0, 0, 0, 92, 93, 174, 426, 427,
	94, 428, 429, 0, 95, 179, 96, 394, 412, 430,
	431, 0, 422, 0, 405, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 294, 102, 103, 0, 406, 408,
	0, 407, 409, 104, 105, 106, 107, 432, 108, 433,
	434, 0, 0, 109, 0, 0, 0, 425, 111, 0,
	0, 0, 0, 378, 112, 413, 392, 0, 113, 114,
	435, 115, 0, 0, 0, 295, 0, 116, 423, 0,
	190, 0, 117, 419, 421, 0, 0, 0, 296, 118,
	436, 437, 438, 0, 404, 0, 297, 119, 298, 120,
	0, 0, 424, 299, 121, 300, 0, 250, 0, 0,
	0, 122, 123, 124, 125, 251, 301, 126, 127, 367,
	128, 393, 420, 129, 439, 130, 131, 0, 0, 0,
	0, 0, 132, 200, 302, 133, 303, 414, 134, 135,
	0, 415, 136, 203, 0, 137, 138, 440, 139, 140,
	0, 141, 142, 143, 0, 144, 304, 145, 146, 382,
	147, 0, 148, 149, 0, 150, 252, 410, 151, 152,
	305, 153, 441, 154, 0, 155, 157, 207, 156, 416,
	0, 0, 158, 159, 0, 254, 442, 0, 0, 253,
	417, 418, 391, 160, 161, 162, 163, 0, 370, 164,
	165, 411, 0, 166, 167, 168, 212, 443, 0, 169,
	0, 0, 0, 0, 170, 171, 172, 173, 368, 0,
	397, 385, 386, 387, 384, 373, 0, 0, 364, 365,
	0, 0, 89, 90, 366, 91, 0, 374, 926, 0,
	379, 0, 0, 0, 92, 93, 174, 426, 427, 94,
	428, 429, 0, 95, 179, 96, 394, 412, 430, 431,
	0, 422, 0, 405, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 294, 102, 103, 0, 406, 408, 0,
	407, 409, 104, 105, 106, 107, 432, 108, 433, 434,
	0, 0, 109, 0, 0, 0, 425, 111, 0, 0,
	0, 0, 378, 112, 413, 392, 0, 113, 114, 435,
	115, 0, 0, 0, 295, 0, 116, 423, 0, 190,
	0, 117, 419, 421, 0, 0, 0, 296, 118, 436,
	437, 438, 0, 404, 0, 297, 119, 298, 120, 0,
	0, 424, 299, 121, 300, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 301, 126, 127, 367, 128,
	393, 420, 129, 439, 130, 131, 0, 0, 0, 0,
	0, 132, 200, 302, 133, 303, 414, 134, 135, 0,
	415, 136, 203, 0, 137, 138, 440, 139, 140, 0,
	141, 142, 143, 0, 144, 304, 145, 146, 382, 147,
	0, 148, 149, 0, 150, 252, 410, 151, 152, 305,
	153, 441, 154, 0, 155, 157, 207, 156, 416, 0,
	0, 158, 159, 0, 254, 442, 0, 0, 253, 417,
	418, 391, 160, 161, 162, 163, 0, 370, 164, 165,
	411, 0, 166, 167, 168, 212, 443, 0, 169, 0,
	0, 0, 0, 170, 171, 172, 173, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 364, 365, 0,
	0, 0, 0, 366, 693, 922, 374, 397, 385, 386,
	387, 384, 373, 0, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 379, 0, 0,
	0, 92, 93, 174, 426, 427, 94, 428, 429, 0,
	95, 179, 96, 394, 412, 430, 431, 0, 422, 0,
	405, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	294, 102, 103, 0, 406, 408, 0, 407, 409, 104,
	105, 106, 107, 432, 108, 433, 434, 0, 0, 109,
	0, 0, 0, 425, 111, 0, 0, 0, 0, 378,
	112, 413, 392, 0, 113, 114, 435, 115, 0, 0,
	0, 295, 0, 116, 423, 0, 190, 0, 117, 419,
	421, 0, 0, 0, 296, 118, 436, 437, 438, 0,
	404, 0, 297, 119, 298, 120, 0, 0, 424, 299,
	121, 300, 0, 250, 0, 0, 0, 122, 123, 124,
	125, 251, 301, 126, 127, 367, 128, 393, 420, 129,
	439, 130, 131, 0, 0, 0, 0, 0, 132, 200,
	302, 133, 303, 414, 134, 135, 0, 415, 136, 203,
	0, 137, 138, 440, 139, 140, 0, 141, 142, 143,
	0, 144, 304, 145, 146, 382, 147, 0, 148, 149,
	0, 150, 252, 410, 151, 152, 305, 153, 441, 154,
	0, 155, 157, 207, 156, 416, 0, 0, 158, 159,
	0, 254, 442, 0, 0, 253, 417, 418, 391, 160,
	161, 162, 163, 0, 370, 164, 165, 411, 0, 166,
	167, 168, 212, 443, 1262, 169, 0, 0, 0, 0,
	170, 171, 172, 173, 368, 0, 397, 385, 386, 387,
	384, 373, 0, 0, 364, 365, 0, 0, 89, 90,
	366, 91, 0, 374, 0, 0, 379, 0, 0, 0,
	92, 93, 174, 426, 427, 94, 428, 429, 0, 95,
	179, 96, 394, 412, 430, 431, 0, 422, 0, 405,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 294,
	102, 103, 0, 406, 408, 0, 407, 409, 104, 105,
	106, 107, 432, 108, 433, 434, 463, 0, 109, 0,
	0, 0, 425, 111, 0, 0, 0, 0, 378, 112,
	413, 392, 0, 113, 114, 435, 115, 0, 0, 0,
	295, 0, 116, 423, 0, 190, 0, 117, 419, 421,
	0, 0, 0, 296, 118, 436, 437, 438, 0, 404,
	0, 297, 119, 298, 120, 0, 0, 424, 299, 121,
	300, 0, 250, 0, 0, 0, 122, 123, 124, 125,
	251, 301, 126, 127, 367, 128, 393, 420, 129, 439,
	130, 131, 0, 0, 0, 0, 0, 132, 200, 302,
	133, 303, 414, 134, 135, 0, 415, 136, 203, 0,
	137, 138, 440, 139, 140, 0, 141, 142, 143, 0,
	144, 304, 145, 146, 382, 147, 0, 148, 149, 0,
	150, 252, 410, 151, 152, 305, 153, 441, 154, 0,
	155, 157, 207, 156, 416, 0, 0, 158, 159, 0,
	254, 442, 0, 0, 253, 417, 418, 391, 160, 161,
	162, 163, 0, 370, 164, 165, 411, 0, 166, 167,
	168, 212, 443, 0, 169, 0, 0, 0, 0, 170,
	171, 172, 173, 368, 0, 397, 385, 386, 387, 384,
	373, 0, 0, 364, 365, 0, 0, 89, 90, 366,
	91, 0, 374, 0, 0, 379, 0, 0, 0, 92,
	93, 174, 426, 427, 94, 428, 429, 0, 95, 179,
	96, 394, 412, 430, 431, 0, 422, 0, 405, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 294, 102,
	103, 0, 406, 408, 0, 407, 409, 104, 105, 106,
	107, 432, 108, 433, 434, 0, 0, 109, 0, 0,
	0, 425, 111, 0, 0, 0, 0, 378, 112, 413,
	392, 0, 113, 114, 435, 115, 0, 0, 980, 295,
	0, 116, 423, 0, 190, 0, 117, 419, 421, 0,
	0, 0, 296, 118, 436, 437, 438, 0, 404, 0,
	297, 119, 298, 120, 0, 0, 424, 299, 121, 300,
	0, 250, 0, 0, 0, 122, 123, 124, 125, 251,
	301, 126, 127, 367, 128, 393, 420, 129, 439, 130,
	131, 0, 0, 0, 0, 0, 132, 200, 302, 133,
	303, 414, 134, 135, 0, 415, 136, 203, 0, 137,
	138, 440, 139, 140, 0, 141, 142, 143, 0, 144,
	304, 145, 146, 382, 147, 0, 148, 149, 0, 150,
	252, 410, 151, 152, 305, 153, 441, 154, 0, 155,
	157, 207, 156, 416, 0, 0, 158, 159, 0, 254,
	442, 0, 0, 253, 417, 418, 391, 160, 161, 162,
	163, 0, 370, 164, 165, 411, 0, 166, 167, 168,
	212, 443, 0, 169, 0, 0, 0, 0, 170, 171,
	172, 173, 368, 0, 397, 385, 386, 387, 384, 373,
	0, 0, 364, 365, 0, 0, 89, 90, 366, 91,
	0, 374, 0, 0, 379, 0, 0, 0, 92, 93,
	174, 426, 427, 94, 428, 429, 0, 95, 179, 96,
	394, 412, 430, 431, 0, 422, 0, 405, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 294, 102, 103,
	0, 406, 408, 0, 407, 409, 104, 105, 106, 107,
	432, 108, 433, 434, 0, 0, 109, 0, 0, 0,
	425, 111, 0, 0, 0, 0, 378, 112, 413, 392,
	0, 113, 114, 435, 115, 0, 0, 0, 295, 0,
	116, 423, 0, 190, 0, 117, 419, 421, 0, 0,
	0, 296, 118, 436, 437, 438, 0, 404, 0, 297,
	119, 298, 120, 0, 0, 424, 299, 121, 300, 0,
	250, 0, 0, 0, 122, 123, 124, 125, 251, 301,
	126, 127, 367, 128, 393, 420, 129, 439, 130, 131,
	0, 0, 0, 0, 0, 132, 200, 302, 133, 303,
	414, 134, 135, 0, 415, 136, 203, 0, 137, 138,
	440, 139, 140, 0, 141, 142, 143, 0, 144, 304,
	145, 146, 382, 147, 0, 148, 149, 0, 150, 252,
	410, 151, 152, 305, 153, 441, 154, 0, 155, 157,
	207, 156, 416, 0, 0, 158, 159, 0, 254, 442,
	0, 0, 253, 417, 418, 391, 160, 161, 162, 163,
	0, 370, 164, 165, 411, 0, 166, 167, 168, 212,
	443, 0, 169, 0, 0, 0, 0, 170, 171, 172,
	173, 368, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 364, 365, 362, 0, 0, 0, 366, 0, 0,
	374, 397, 385, 386, 387, 384, 373, 0, 0, 0,
	0, 0, 0, 89, 90, 631, 91, 0, 0, 0,
	0, 379, 0, 0, 0, 92, 93, 174, 426, 427,
	94, 428, 429, 0, 95, 179, 96, 394, 412, 430,
	431, 0, 422, 0, 405, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 294, 102, 103, 0, 406, 408,
	0, 407, 409, 104, 105, 106, 107, 432, 108, 433,
	434, 0, 0, 109, 0, 0, 0, 425, 111, 0,
	0, 0, 0, 378, 112, 413, 392, 0, 113, 114,
	435, 115, 0, 0, 0, 295, 0, 116, 423, 0,
	190, 0, 117, 419, 421, 0, 0, 0, 296, 118,
	436, 437, 438, 0, 404, 0, 297, 119, 298, 120,
	0, 0, 424, 299, 121, 300, 0, 250, 0, 0,
	0, 122, 123, 124, 125, 251, 301, 126, 127, 367,
	128, 393, 420, 129, 439, 130, 131, 0, 0, 0,
	0, 0, 132, 200, 302, 133, 303, 414, 134, 135,
	0, 415, 136, 203, 0, 137, 138, 440, 139, 140,
	0, 141, 142, 143, 0, 144, 304, 145, 146, 382,
	147, 0, 148, 149, 0, 150, 252, 410, 151, 152,
	305, 153, 441, 154, 0, 155, 157, 207, 156, 416,
	0, 0, 158, 159, 0, 254, 442, 0, 0, 253,
	417, 418, 391, 160, 161, 162, 163, 0, 370, 164,
	165, 411, 0, 166, 167, 168, 212, 443, 0, 169,
	0, 0, 0, 0, 170, 171, 172, 173, 368, 0,
	397, 385, 386, 387, 384, 373, 0, 0, 364, 365,
	0, 0, 89, 90, 366, 91, 0, 374, 0, 0,
	379, 0, 0, 0, 92, 93, 174, 426, 427, 94,
	428, 429, 0, 95, 179, 96, 394, 412, 430, 431,
	0, 422, 0, 405, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 294, 102, 1576, 0, 406, 408, 0,
	407, 409, 104, 105, 106, 107, 432, 108, 433, 434,
	0, 0, 109, 0, 0, 0, 425, 111, 0, 0,
	0, 0, 378, 112, 413, 392, 0, 113, 114, 435,
	115, 0, 0, 0, 295, 0, 116, 423, 0, 190,
	0, 117, 419, 421, 0, 0, 0, 296, 118, 436,
	437, 438, 0, 404, 0, 297, 119, 298, 120, 0,
	0, 424, 299, 121, 300, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 301, 126, 127, 367, 128,
	393, 420, 129, 439, 130, 131, 0, 0, 0, 0,
	0, 132, 200, 302, 133, 303, 414, 134, 135, 0,
	415, 136, 203, 0, 137, 138, 440, 139, 140, 0,
	141, 142, 143, 0, 144, 304, 145, 146, 382, 147,
	0, 148, 149, 0, 150, 252, 410, 151, 152, 305,
	153, 441, 154, 0, 155, 157, 207, 156, 416, 0,
	0, 158, 159, 0, 254, 442, 0, 0, 253, 417,
	418, 391, 160, 161, 1575, 163, 0, 370, 164, 165,
	411, 0, 166, 167, 168, 212, 443, 0, 169, 0,
	0, 0, 0, 170, 171, 172, 173, 368, 0, 397,
	385, 386, 387, 384, 373, 0, 0, 364, 365, 0,
	0, 89, 90, 366, 91, 0, 374, 0, 0, 379,
	0, 0, 0, 92, 93, 1574, 426, 427, 94, 428,
	429, 0, 95, 179, 96, 394, 412, 430, 431, 0,
	422, 0, 405, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 294, 102, 1576, 0, 406, 408, 0, 407,
	409, 104, 105, 106, 107, 432, 108, 433, 434, 0,
	0, 109, 0, 0, 0, 425, 111, 0, 0, 0,
	0, 378, 112, 413, 392, 0, 113, 114, 435, 115,
	0, 0, 0, 295, 0, 116, 423, 0, 190, 0,
	117, 419, 421, 0, 0, 0, 296, 118, 436, 437,
	438, 0, 404, 0, 297, 119, 298, 120, 0, 0,
	424, 299, 121, 300, 0, 250, 0, 0, 0, 122,
	123, 124, 125, 251, 301, 126, 127, 367, 128, 393,
	420, 129, 439, 130, 131, 0, 0, 0, 0, 0,
	132, 200, 302, 133, 303, 414, 134, 135, 0, 415,
	136, 203, 0, 137, 138, 440, 139, 140, 0, 141,
	142, 143, 0, 144, 304, 145, 146, 382, 147, 0,
	148, 149, 0, 150, 252, 410, 151, 152, 305, 153,
	441, 154, 0, 155, 157, 207, 156, 416, 0, 0,
	158, 159, 0, 254, 442, 0, 0, 253, 417, 418,
	391, 160, 161, 1575, 163, 0, 370, 164, 165, 411,
	0, 166, 167, 168, 212, 443, 0, 169, 0, 0,
	0, 0, 170, 171, 172, 173, 368, 0, 397, 385,
	386, 387, 384, 373, 0, 0, 364, 365, 0, 0,
	89, 90, 366, 91, 0, 374, 0, 0, 379, 0,
	0, 0, 92, 93, 174, 426, 427, 94, 428, 429,
	0, 95, 179, 96, 394, 412, 430, 431, 0, 422,
	0, 405, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 294, 102, 103, 0, 406, 408, 0, 407, 409,
	104, 105, 106, 107, 432, 108, 433, 434, 0, 0,
	109, 0, 0, 0, 425, 111, 0, 0, 0, 0,
	378, 112, 413, 392, 0, 113, 114, 435, 115, 0,
	0, 0, 295, 0, 116, 423, 0, 190, 0, 117,
	419, 421, 0, 0, 0, 296, 118, 436, 437, 438,
	0, 404, 0, 297, 119, 298, 120, 0, 0, 424,
	299, 121, 300, 0, 250, 0, 0, 0, 122, 123,
	124, 125, 251, 301, 126, 127, 367, 128, 393, 420,
	129, 439, 130, 131, 0, 0, 0, 0, 0, 132,
	200, 302, 133, 303, 414, 134, 135, 0, 415, 136,
	203, 0, 137, 138, 440, 139, 140, 0, 141, 142,
	143, 0, 144, 304, 145, 146, 382, 147, 0, 148,
	149, 0, 150, 252, 410, 151, 152, 305, 153, 441,
	154, 0, 155, 157, 207, 156, 416, 0, 0, 158,
	159, 0, 254, 442, 0, 0, 253, 417, 418, 391,
	160, 161, 162, 163, 0, 370, 164, 165, 411, 0,
	166, 167, 168, 212, 443, 0, 169, 0, 0, 0,
	0, 170, 171, 172, 173, 368, 0, 397, 385, 386,
	387, 384, 373, 0, 0, 364, 365, 0, 0, 89,
	90, 366, 91, 0, 374, 0, 0, 379, 0, 0,
	0, 92, 93, 174, 426, 427, 94, 428, 429, 0,
	95, 179, 96, 394, 412, 430, 431, 0, 422, 0,
	405, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	294, 102, 103, 0, 406, 408, 0, 407, 409, 104,
	105, 106, 107, 432, 108, 433, 434, 0, 0, 109,
	0, 0, 0, 425, 111, 0, 0, 0, 0, 378,
	112, 413, 392, 0, 113, 114, 435, 115, 0, 0,
	0, 295, 0, 116, 423, 0, 190, 0, 117, 419,
	421, 0, 0, 0, 296, 118, 436, 437, 438, 0,
	404, 0, 297, 119, 298, 120, 0, 0, 424, 299,
	121, 300, 0, 250, 0, 0, 0, 122, 123, 124,
	125, 251, 301, 126, 127, 0, 128, 393, 420, 129,
	439, 130, 131, 0, 0, 0, 0, 0, 132, 200,
	302, 133, 303, 414, 134, 135, 0, 415, 136, 203,
	0, 137, 138, 440, 139, 140, 0, 141, 142, 143,
	0, 144, 304, 145, 146, 970, 147, 0, 148, 149,
	0, 150, 252, 410, 151, 152, 305, 153, 441, 154,
	0, 155, 157, 207, 156, 416, 0, 0, 158, 159,
	0, 254, 442, 0, 0, 253, 417, 418, 391, 160,
	161, 162, 163, 0, 0, 164, 165, 411, 0, 166,
	167, 168, 212, 443, 0, 169, 0, 0, 0, 0,
	170, 171, 172, 173, 397, 385, 386, 387, 384, 373,
	0, 0, 0, 0, 966, 967, 89, 90, 0, 91,
	968, 0, 0, 969, 379, 0, 0, 0, 92, 93,
	0, 426, 427, 94, 428, 429, 0, 95, 179, 96,
	394, 412, 430, 431, 0, 422, 0, 405, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 294, 102, 1576,
	0, 406, 408, 0, 407, 409, 104, 105, 106, 107,
	432, 108, 433, 434, 0, 0, 109, 0, 0, 0,
	425, 111, 0, 0, 0, 0, 378, 112, 413, 392,
	0, 113, 114, 435, 115, 0, 0, 0, 295, 0,
	116, 423, 0, 190, 0, 117, 419, 421, 0, 0,
	0, 296, 118, 436, 437, 438, 0, 404, 0, 0,
	119, 298, 120, 0, 0, 424, 299, 121, 0, 0,
	250, 0, 0, 0, 122, 123, 124, 125, 251, 301,
	126, 127, 367, 128, 393, 420, 129, 439, 130, 131,
	0, 0, 0, 0, 0, 132, 200, 302, 133, 303,
	414, 134, 135, 0, 415, 136, 203, 0, 137, 138,
	440, 139, 140, 0, 141, 142, 143, 0, 144, 304,
	145, 146, 382, 147, 0, 148, 149, 0, 150, 252,
	410, 151, 152, 0, 153, 441, 154, 0, 155, 157,
	207, 156, 416, 0, 0, 158, 159, 0, 254, 442,
	0, 0, 253, 417, 418, 391, 160, 161, 1575, 163,
	0, 370, 164, 165, 411, 0, 166, 167, 168, 212,
	443, 0, 169, 0, 0, 0, 0, 170, 171, 172,
	173, 397, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 364, 365, 89, 90, 0, 91, 366, 0, 0,
	374, 0, 0, 0, 0, 92, 93, 174, 175, 176,
	94, 177, 178, 0, 95, 179, 96, 0, 412, 180,
	181, 0, 422, 0, 405, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 294, 102, 103, 0, 406, 408,
	0, 407, 409, 104, 105, 106, 107, 183, 108, 184,
	185, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 186, 112, 413, 0, 0, 113, 114,
	188, 115, 0, 0, 0, 295, 0, 116, 423, 0,
	190, 0, 117, 419, 421, 0, 0, 0, 296, 118,
	193, 194, 195, 0, 196, 0, 297, 119, 298, 120,
	0, 0, 424, 299, 121, 300, 0, 250, 0, 0,
	0, 122, 123, 124, 125, 251, 301, 126, 127, 0,
	128, 0, 420, 129, 199, 130, 131, 0, 0, 0,
	0, 0, 132, 200, 302, 133, 303, 414, 134, 135,
	0, 415, 136, 203, 0, 137, 138, 204, 139, 140,
	0, 141, 142, 143, 0, 144, 304, 145, 146, 205,
	147, 0, 148, 149, 0, 150, 252, 410, 151, 152,
	305, 153, 206, 154, 0, 155, 157, 207, 156, 416,
	0, 0, 158, 159, 0, 254, 209, 0, 0, 253,
	417, 418, 0, 160, 161, 162, 163, 0, 0, 164,
	165, 411, 0, 166, 167, 168, 212, 213, 0, 169,
	0, 0, 0, 0, 170, 171, 172, 173, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 1373, 0, 0,
	0, 0, 92, 93, 174, 175, 176, 94, 177, 178,
	0, 95, 179, 96, 0, 0, 180, 181, 0, 182,
	0, 293, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 294, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 183, 108, 184, 185, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 0, 0, 0,
	186, 112, 187, 0, 0, 113, 114, 188, 115, 0,
	0, 0, 295, 0, 116, 189, 0, 190, 0, 117,
	191, 192, 0, 0, 0, 296, 118, 193, 194, 195,
	0, 196, 0, 297, 119, 298, 120, 0, 0, 197,
	299, 121, 300, 0, 250, 0, 0, 0, 122, 123,
	124, 125, 251, 301, 126, 127, 0, 128, 0, 198,
	129, 199, 130, 131, 0, 0, 0, 0, 0, 132,
	200, 302, 133, 303, 201, 134, 135, 0, 202, 136,
	203, 0, 137, 138, 204, 139, 140, 0, 141, 142,
	143, 0, 144, 304, 145, 146, 205, 147, 0, 148,
	149, 43, 150, 252, 0, 151, 152, 305, 153, 206,
	154, 0, 155, 157, 207, 156, 208, 0, 45, 158,
	159, 0, 254, 209, 0, 0, 253, 210, 211, 0,
	160, 161, 162, 163, 0, 0, 164, 165, 0, 0,
	166, 167, 168, 292, 213, 0, 169, 0, 0, 0,
	41, 170, 171, 172, 173, 0, 42, 288, 508, 512,
	0, 513, 503, 0, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 40, 0, 0, 0, 0, 0,
	0, 92, 93, 174, 175, 176, 94, 177, 178, 0,
	95, 179, 96, 0, 0, 180, 181, 0, 182, 0,
	293, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	294, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 183, 108, 184, 185, 516, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 186,
	112, 187, 505, 0, 113, 114, 188, 115, 0, 0,
	0, 295, 0, 116, 189, 0, 190, 0, 117, 191,
	192, 0, 0, 0, 296, 118, 193, 194, 195, 0,
	196, 0, 297, 119, 298, 120, 0, 0, 197, 299,
	121, 300, 0, 250, 0, 0, 0, 122, 123, 124,
	125, 251, 301, 126, 127, 0, 128, 0, 198, 129,
	199, 130, 131, 0, 506, 0, 0, 0, 132, 200,
	302, 133, 303, 201, 134, 135, 0, 202, 136, 203,
	0, 137, 138, 204, 139, 140, 0, 141, 142, 143,
	0, 144, 304, 145, 146, 205, 147, 0, 148, 149,
	0, 150, 252, 0, 151, 152, 305, 153, 206, 154,
	0, 155, 157, 207, 156, 208, 0, 0, 158, 159,
	0, 254, 209, 0, 0, 253, 210, 211, 504, 160,
	161, 162, 163, 0, 0, 164, 165, 0, 0, 166,
	167, 168, 212, 213, 0, 169, 0, 0, 0, 0,
	170, 171, 172, 173, 288, 508, 512, 0, 513, 503,
	0, 0, 0, 0, 514, 509, 89, 90, 0, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	174, 175, 176, 94, 177, 178, 0, 95, 179, 96,
	0, 0, 180, 181, 0, 182, 0, 293, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 294, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	183, 108, 184, 185, 499, 0, 109, 0, 0, 0,
	110, 111, 0, 0, 0, 0, 186, 112, 187, 505,
	0, 113, 114, 188, 115, 0, 0, 0, 295, 0,
	116, 189, 0, 190, 0, 117, 191, 192, 0, 0,
	0, 296, 118, 193, 194, 195, 0, 196, 0, 297,
	119, 298, 120, 0, 0, 197, 299, 121, 300, 0,
	250, 0, 0, 0, 122, 123, 124, 125, 251, 301,
	126, 127, 0, 128, 0, 198, 129, 199, 130, 131,
	0, 506, 0, 0, 0, 132, 200, 302, 133, 303,
	201, 134, 135, 0, 202, 136, 203, 0, 137, 138,
	204, 139, 140, 0, 141, 142, 143, 0, 144, 304,
	145, 146, 205, 147, 0, 148, 149, 0, 150, 252,
	0, 151, 152, 305, 153, 206, 154, 0, 155, 157,
	207, 156, 208, 0, 0, 158, 159, 0, 254, 209,
	0, 0, 253, 210, 211, 504, 160, 161, 162, 163,
	0, 0, 164, 165, 0, 0, 166, 167, 168, 212,
	213, 0, 169, 0, 0, 0, 0, 170, 171, 172,
	173, 288, 508, 512, 0, 513, 503, 0, 0, 0,
	0, 514, 509, 89, 90, 0, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 93, 174, 175, 176,
	94, 177, 178, 0, 95, 179, 96, 0, 0, 180,
	181, 0, 182, 0, 293, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 294, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 183, 108, 184,
	185, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 186, 112, 187, 505, 0, 113, 114,
	188, 115, 0, 0, 0, 295, 0, 116, 189, 0,
	190, 0, 117, 191, 192, 0, 0, 0, 296, 118,
	193, 194, 195, 0, 196, 0, 297, 119, 298, 120,
	0, 0, 197, 299, 121, 300, 0, 250, 0, 0,
	0, 122, 123, 124, 125, 251, 301, 126, 127, 0,
	128, 0, 198, 129, 199, 130, 131, 0, 506, 0,
	0, 0, 132, 200, 302, 133, 303, 201, 134, 135,
	0, 202, 136, 203, 0, 137, 138, 204, 139, 140,
	0, 141, 142, 143, 0, 144, 304, 145, 146, 205,
	147, 0, 148, 149, 0, 150, 252, 0, 151, 152,
	305, 153, 206, 154, 0, 155, 157, 207, 156, 208,
	0, 0, 158, 159, 0, 254, 209, 0, 0, 253,
	210, 211, 504, 160, 161, 162, 163, 0, 0, 164,
	165, 0, 0, 166, 167, 168, 212, 213, 86, 169,
	0, 0, 0, 0, 170, 171, 172, 173, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 514, 509,
	0, 0, 92, 93, 174, 175, 176, 94, 177, 178,
	0, 95, 179, 96, 0, 0, 180, 181, 0, 182,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 183, 108, 184, 185, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 0, 0, 0,
	186, 112, 187, 0, 0, 113, 114, 188, 115, 0,
	0, 0, 0, 0, 116, 189, 0, 190, 0, 117,
	191, 192, 0, 0, 0, 0, 118, 193, 194, 195,
	0, 196, 0, 0, 119, 0, 120, 0, 0, 197,
	0, 121, 0, 0, 250, 0, 0, 0, 122, 123,
	124, 125, 251, 0, 126, 127, 0, 128, 0, 198,
	129, 199, 130, 131, 0, 0, 263, 0, 0, 132,
	200, 0, 133, 0, 201, 134, 135, 0, 202, 136,
	203, 0, 137, 138, 204, 139, 140, 0, 141, 142,
	143, 0, 144, 0, 145, 146, 205, 147, 0, 148,
	149, 43, 150, 252, 0, 151, 152, 0, 153, 206,
	154, 0, 155, 157, 207, 156, 208, 0, 45, 158,
	159, 0, 254, 209, 0, 0, 253, 210, 211, 0,
	160, 161, 162, 163, 0, 0, 164, 165, 0, 0,
	166, 167, 168, 292, 213, 0, 169, 0, 0, 0,
	41, 170, 171, 172, 173, 86, 42, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 833, 0, 0, 0, 0, 92,
	93, 174, 175, 176, 94, 177, 178, 0, 95, 179,
	96, 0, 0, 180, 181, 0, 182, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 183, 108, 184, 185, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 186, 112, 187,
	0, 0, 113, 114, 188, 115, 0, 0, 0, 0,
	0, 116, 189, 0, 190, 0, 117, 191, 192, 0,
	0, 0, 0, 118, 193, 194, 195, 0, 196, 0,
	0, 119, 0, 120, 0, 0, 197, 0, 121, 0,
	0, 250, 0, 0, 0, 122, 123, 124, 125, 251,
	0, 126, 127, 0, 128, 0, 198, 129, 199, 130,
	131, 0, 0, 0, 0, 0, 132, 200, 0, 133,
	0, 201, 134, 135, 0, 202, 136, 203, 0, 137,
	138, 204, 139, 140, 0, 141, 142, 143, 0, 144,
	0, 145, 146, 205, 147, 0, 148, 149, 43, 150,
	252, 0, 151, 152, 0, 153, 206, 154, 0, 155,
	157, 207, 156, 208, 0, 45, 158, 159, 0, 254,
	209, 0, 0, 253, 210, 211, 0, 160, 161, 162,
	163, 0, 0, 164, 165, 0, 0, 166, 167, 168,
	292, 213, 0, 169, 0, 0, 0, 41, 170, 171,
	172, 173, 86, 42, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 40, 0, 1069, 0, 0, 92, 93, 174, 175,
	176, 94, 177, 178, 0, 95, 179, 96, 0, 0,
	180, 181, 0, 182, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 183, 108,
	184, 185, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 0, 0, 0, 186, 112, 187, 0, 0, 113,
	114, 188, 115, 0, 0, 0, 0, 0, 116, 189,
	0, 190, 0, 117, 191, 192, 0, 0, 0, 0,
	118, 193, 194, 195, 0, 196, 0, 0, 119, 0,
	120, 0, 0, 197, 0, 121, 0, 0, 250, 0,
	0, 0, 122, 123, 124, 125, 251, 0, 126, 127,
	0, 128, 0, 198, 129, 199, 130, 131, 0, 0,
	0, 0, 0, 132, 200, 0, 133, 0, 201, 134,
	135, 0, 202, 136, 203, 0, 137, 138, 204, 139,
	140, 0, 141, 142, 143, 0, 144, 0, 145, 146,
	205, 147, 0, 148, 149, 0, 150, 252, 0, 151,
	152, 0, 153, 206, 154, 0, 155, 157, 207, 156,
	208, 0, 0, 158, 159, 0, 254, 209, 0, 0,
	253, 210, 211, 0, 160, 161, 162, 163, 0, 86,
	164, 165, 0, 0, 166, 167, 168, 212, 213, 0,
	169, 89, 90, 0, 91, 170, 171, 172, 173, 0,
	0, 0, 0, 92, 93, 174, 175, 176, 94, 177,
	178, 0, 95, 179, 96, 0, 0, 180, 181, 353,
	182, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 183, 108, 184, 185, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 186, 112, 187, 0, 0, 113, 114, 188, 115,
	0, 0, 0, 0, 0, 116, 189, 0, 190, 0,
	117, 191, 192, 0, 0, 0, 0, 118, 193, 194,
	195, 0, 196, 0, 0, 119, 0, 120, 0, 0,
	197, 0, 121, 0, 0, 250, 0, 0, 0, 122,
	123, 124, 125, 251, 0, 126, 127, 0, 128, 0,
	198, 129, 199, 130, 131, 0, 0, 263, 0, 0,
	132, 200, 0, 133, 0, 201, 134, 135, 0, 202,
	136, 203, 0, 137, 138, 204, 139, 140, 0, 141,
	142, 143, 0, 144, 0, 145, 146, 205, 147, 0,
	148, 149, 0, 150, 252, 0, 151, 152, 0, 153,
	206, 154, 0, 155, 157, 207, 156, 208, 0, 0,
	158, 159, 0, 254, 209, 0, 0, 253, 210, 211,
	0, 160, 161, 162, 163, 0, 0, 164, 165, 0,
	0, 166, 167, 168, 212, 213, 0, 169, 0, 0,
	0, 0, 170, 171, 172, 173, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 833, 0, 0, 0, 0,
	92, 93, 174, 175, 176, 94, 177, 178, 0, 95,
	179, 96, 0, 0, 180, 181, 0, 182, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 183, 108, 184, 185, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 0, 0, 0, 186, 112,
	187, 0, 0, 113, 114, 188, 115, 0, 0, 0,
	0, 0, 116, 189, 0, 190, 0, 117, 191, 192,
	0, 0, 0, 0, 118, 193, 194, 195, 0, 196,
	0, 0, 119, 0, 120, 0, 0, 197, 0, 121,
	0, 0, 250, 0, 0, 0, 122, 123, 124, 125,
	251, 0, 126, 127, 0, 128, 0, 198, 129, 199,
	130, 131, 0, 0, 0, 0, 0, 132, 200, 0,
	133, 0, 201, 134, 135, 0, 202, 136, 203, 0,
	137, 138, 204, 139, 140, 0, 141, 142, 143, 0,
	144, 0, 145, 146, 205, 147, 0, 148, 149, 0,
	150, 252, 0, 151, 152, 0, 153, 206, 154, 0,
	155, 157, 207, 156, 208, 0, 0, 158, 159, 0,
	254, 209, 0, 0, 253, 210, 211, 0, 160, 161,
	162, 163, 0, 0, 164, 165, 0, 0, 166, 167,
	168, 212, 213, 0, 169, 0, 0, 0, 0, 170,
	171, 172, 173, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 778, 0, 0, 0, 0, 92, 93, 174,
	175, 176, 94, 177, 178, 0, 95, 179, 96, 0,
	0, 180, 181, 0, 182, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 183,
	108, 184, 185, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 186, 112, 187, 0, 0,
	113, 114, 188, 115, 0, 0, 0, 0, 0, 116,
	189, 0, 190, 0, 117, 191, 192, 0, 0, 0,
	0, 118, 193, 194, 195, 0, 196, 0, 0, 119,
	0, 120, 0, 0, 197, 0, 121, 0, 0, 250,
	0, 0, 0, 122, 123, 124, 125, 251, 0, 126,
	127, 0, 128, 0, 198, 129, 199, 130, 131, 0,
	0, 0, 0, 0, 132, 200, 0, 133, 0, 201,
	134, 135, 0, 202, 136, 203, 0, 137, 138, 204,
	139, 140, 0, 141, 142, 143, 0, 144, 0, 145,
	146, 205, 147, 0, 148, 149, 0, 150, 252, 0,
	151, 152, 0, 153, 206, 154, 0, 155, 157, 207,
	156, 208, 0, 0, 158, 159, 0, 254, 209, 0,
	0, 253, 210, 211, 0, 160, 161, 162, 163, 0,
	0, 164, 165, 0, 0, 166, 167, 168, 212, 213,
	0, 169, 0, 0, 0, 0, 170, 171, 172, 173,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 1280,
	0, 0, 0, 0, 92, 93, 174, 175, 176, 94,
	177, 178, 0, 95, 179, 96, 0, 0, 180, 181,
	0, 182, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 183, 108, 184, 185,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 0,
	0, 0, 186, 112, 187, 0, 0, 113, 114, 188,
	115, 0, 0, 0, 0, 0, 116, 189, 0, 190,
	0, 117, 191, 192, 0, 0, 0, 0, 118, 193,
	194, 195, 0, 196, 0, 0, 119, 0, 120, 0,
	0, 197, 0, 121, 0, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 0, 126, 127, 0, 128,
	0, 198, 129, 199, 130, 131, 0, 0, 0, 0,
	0, 132, 200, 0, 133, 0, 201, 134, 135, 0,
	202, 136, 203, 0, 137, 138, 204, 139, 140, 0,
	141, 142, 143, 0, 144, 0, 145, 146, 205, 147,
	0, 148, 149, 0, 150, 252, 0, 151, 152, 0,
	153, 206, 154, 0, 155, 157, 207, 156, 208, 0,
	0, 158, 159, 0, 254, 209, 0, 0, 253, 210,
	211, 0, 160, 161, 162, 163, 0, 0, 164, 165,
	0, 0, 166, 167, 168, 212, 213, 0, 169, 0,
	0, 0, 0, 170, 171, 172, 173, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 454, 0, 0, 0,
	0, 92, 93, 174, 175, 176, 94, 177, 178, 0,
	95, 179, 96, 0, 0, 180, 181, 0, 182, 0,
	293, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	294, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 183, 108, 184, 185, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 186,
	112, 187, 0, 0, 113, 114, 188, 115, 0, 0,
	0, 295, 0, 116, 189, 0, 190, 0, 117, 191,
	192, 0, 0, 0, 296, 118, 193, 194, 195, 0,
	196, 0, 297, 119, 298, 120, 0, 0, 197, 299,
	121, 300, 0, 250, 0, 0, 0, 122, 123, 124,
	125, 251, 301, 126, 127, 0, 128, 0, 198, 129,
	199, 130, 131, 0, 0, 0, 0, 0, 132, 200,
	302, 133, 303, 201, 134, 135, 0, 202, 136, 203,
	0, 137, 138, 204, 139, 140, 0, 141, 142, 143,
	0, 144, 304, 145, 146, 205, 147, 0, 148, 149,
	0, 150, 252, 0, 151, 152, 305, 153, 206, 154,
	0, 155, 157, 207, 156, 208, 0, 0, 158, 159,
	0, 254, 209, 0, 0, 253, 210, 211, 0, 160,
	161, 162, 163, 0, 86, 164, 165, 0, 0, 166,
	167, 168, 212, 213, 0, 169, 89, 90, 0, 91,
	170, 171, 172, 173, 0, 0, 0, 0, 92, 93,
	174, 175, 176, 94, 177, 178, 0, 95, 179, 96,
	0, 0, 180, 181, 753, 182, 0, 0, 0, 97,
	98, 99, 0, 100, 751, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	183, 108, 184, 185, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 0, 0, 0, 186, 112, 187, 0,
	0, 113, 114, 188, 115, 0, 756, 0, 0, 0,
	116, 189, 0, 190, 0, 117, 191, 192, 0, 811,
	0, 0, 118, 193, 194, 195, 0, 196, 0, 0,
	119, 0, 120, 0, 0, 197, 0, 121, 0, 0,
	250, 0, 0, 0, 122, 123, 124, 125, 251, 0,
	126, 127, 0, 128, 0, 198, 129, 199, 130, 131,
	0, 0, 0, 0, 0, 132, 200, 0, 133, 0,
	201, 134, 135, 0, 202, 136, 203, 755, 137, 138,
	204, 139, 140, 0, 141, 142, 143, 0, 144, 0,
	145, 146, 205, 147, 0, 148, 149, 0, 150, 252,
	0, 151, 152, 0, 153, 206, 154, 0, 155, 157,
	207, 156, 208, 0, 0, 158, 159, 0, 254, 209,
	0, 0, 253, 210, 211, 0, 160, 161, 162, 163,
	0, 812, 164, 165, 0, 0, 166, 167, 168, 212,
	213, 86, 169, 0, 0, 0, 0, 170, 171, 172,
	173, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 93, 174, 175, 176,
	94, 177, 178, 0, 95, 179, 96, 0, 0, 180,
	181, 753, 182, 0, 0, 748, 97, 98, 99, 0,
	100, 751, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 183, 108, 184,
	185, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 186, 112, 187, 0, 0, 113, 114,
	188, 115, 0, 756, 0, 0, 0, 116, 189, 0,
	190, 0, 117, 747, 192, 0, 0, 0, 0, 118,
	193, 194, 195, 0, 196, 0, 0, 119, 0, 120,
	0, 0, 197, 0, 121, 0, 0, 250, 0, 0,
	0, 122, 123, 124, 125, 251, 0, 126, 127, 0,
	128, 0, 198, 129, 199, 130, 131, 0, 0, 0,
	0, 0, 132, 200, 0, 133, 0, 201, 134, 135,
	0, 202, 136, 203, 755, 137, 138, 204, 139, 140,
	0, 141, 142, 143, 0, 144, 0, 145, 146, 205,
	147, 0, 148, 149, 0, 150, 252, 0, 151, 152,
	0, 153, 206, 154, 0, 155, 157, 207, 156, 208,
	0, 0, 158, 159, 0, 254, 209, 0, 0, 253,
	210, 211, 0, 160, 161, 162, 163, 0, 754, 164,
	165, 0, 0, 166, 167, 168, 212, 213, 86, 169,
	0, 0, 0, 0, 170, 171, 172, 173, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 0, 0, 1069,
	0, 0, 92, 93, 174, 175, 176, 94, 177, 178,
	0, 95, 179, 96, 0, 0, 180, 181, 0, 182,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 183, 108, 184, 185, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 0, 0, 0,
	186, 112, 187, 0, 0, 113, 114, 188, 115, 0,
	0, 0, 0, 0, 116, 189, 0, 190, 0, 117,
	191, 192, 0, 0, 0, 0, 118, 193, 194, 195,
	0, 196, 0, 0, 119, 0, 120, 0, 0, 197,
	0, 121, 0, 0, 250, 0, 0, 0, 122, 123,
	124, 125, 251, 0, 126, 127, 0, 128, 0, 198,
	129, 199, 130, 131, 0, 0, 0, 0, 0, 132,
	200, 0, 133, 0, 201, 134, 135, 0, 202, 136,
	203, 0, 137, 138, 204, 139, 140, 0, 141, 142,
	143, 0, 144, 0, 145, 146, 205, 147, 0, 148,
	149, 0, 150, 252, 0, 151, 152, 0, 153, 206,
	154, 0, 155, 157, 207, 156, 208, 0, 0, 158,
	159, 0, 254, 209, 0, 0, 253, 210, 211, 0,
	160, 161, 162, 163, 0, 86, 164, 165, 0, 0,
	166, 167, 168, 212, 213, 0, 169, 89, 90, 0,
	91, 170, 171, 172, 173, 0, 0, 0, 0, 92,
	93, 174, 175, 176, 94, 177, 178, 0, 95, 179,
	96, 0, 0, 180, 181, 0, 182, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 183, 108, 184, 185, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 186, 112, 187,
	0, 0, 113, 114, 188, 115, 0, 0, 0, 0,
	0, 116, 189, 0, 190, 0, 117, 191, 192, 0,
	0, 0, 0, 118, 193, 194, 195, 0, 196, 0,
	0, 119, 0, 120, 0, 0, 197, 0, 121, 0,
	0, 250, 0, 0, 0, 122, 123, 124, 125, 251,
	0, 126, 127, 0, 128, 0, 198, 129, 199, 130,
	131, 0, 0, 263, 0, 0, 132, 200, 0, 133,
	0, 201, 134, 135, 0, 202, 136, 203, 0, 137,
	138, 204, 139, 140, 0, 141, 142, 143, 0, 144,
	0, 145, 146, 205, 147, 0, 148, 149, 0, 150,
	252, 0, 151, 152, 0, 153, 206, 154, 0, 155,
	157, 207, 156, 208, 0, 0, 158, 159, 0, 254,
	209, 0, 0, 253, 210, 211, 0, 160, 161, 162,
	163, 0, 86, 164, 165, 0, 0, 166, 167, 168,
	212, 213, 0, 169, 89, 90, 0, 91, 170, 171,
	172, 173, 0, 0, 0, 0, 92, 93, 174, 175,
	176, 94, 177, 178, 0, 95, 179, 96, 0, 0,
	180, 181, 0, 182, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 494, 107, 183, 108,
	184, 185, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 0, 0, 0, 186, 112, 187, 0, 0, 113,
	114, 188, 115, 0, 0, 0, 0, 0, 116, 189,
	0, 190, 0, 117, 191, 192, 0, 0, 0, 0,
	118, 193, 194, 195, 0, 196, 0, 0, 119, 0,
	120, 0, 0, 197, 0, 121, 0, 0, 250, 0,
	0, 0, 122, 123, 124, 125, 251, 0, 126, 127,
	0, 128, 0, 198, 129, 199, 130, 131, 0, 0,
	0, 0, 0, 132, 200, 0, 133, 0, 201, 134,
	135, 0, 202, 136, 203, 0, 137, 138, 204, 139,
	140, 0, 141, 142, 143, 0, 144, 0, 145, 146,
	205, 147, 0, 148, 149, 0, 150, 252, 0, 151,
	152, 0, 153, 206, 154, 0, 155, 157, 207, 156,
	208, 0, 493, 158, 159, 0, 254, 209, 0, 0,
	253, 210, 211, 0, 160, 161, 162, 163, 0, 86,
	164, 165, 0, 0, 166, 167, 168, 212, 213, 0,
	169, 89, 90, 0, 91, 170, 171, 172, 173, 0,
	0, 0, 0, 92, 93, 174, 175, 176, 94, 177,
	178, 0, 95, 179, 96, 0, 0, 180, 181, 0,
	182, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 183, 108, 184, 185, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 186, 112, 187, 0, 0, 113, 114, 188, 115,
	0, 0, 0, 0, 0, 116, 189, 0, 190, 0,
	117, 269, 192, 0, 0, 0, 0, 118, 193, 194,
	195, 0, 196, 0, 0, 119, 0, 120, 0, 0,
	197, 0, 121, 0, 0, 250, 0, 0, 0, 122,
	123, 124, 125, 251, 0, 126, 127, 0, 128, 0,
	198, 129, 199, 130, 131, 0, 0, 263, 0, 0,
	132, 200, 0, 133, 0, 201, 134, 135, 0, 202,
	136, 203, 0, 137, 138, 204, 139, 140, 0, 141,
	142, 143, 0, 144, 0, 145, 146, 205, 147, 0,
	148, 149, 0, 150, 252, 0, 151, 152, 0, 153,
	206, 154, 0, 155, 157, 207, 156, 208, 0, 0,
	158, 159, 0, 254, 209, 0, 0, 253, 210, 211,
	0, 160, 161, 162, 163, 0, 86, 164, 165, 0,
	0, 166, 167, 168, 212, 213, 0, 169, 89, 90,
	0, 91, 170, 171, 172, 173, 0, 0, 0, 0,
	92, 93, 174, 175, 176, 94, 177, 178, 0, 95,
	179, 96, 0, 0, 180, 181, 0, 182, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 183, 108, 184, 185, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 0, 0, 0, 186, 112,
	187, 0, 0, 113, 114, 188, 115, 0, 0, 0,
	0, 0, 116, 189, 0, 190, 0, 117, 191, 192,
	0, 0, 0, 0, 118, 193, 194, 195, 0, 196,
	0, 0, 119, 0, 120, 0, 0, 197, 0, 121,
	0, 0, 250, 0, 0, 0, 122, 123, 124, 125,
	251, 0, 126, 127, 0, 128, 0, 198, 129, 199,
	130, 131, 0, 0, 0, 0, 0, 132, 200, 0,
	133, 0, 201, 134, 135, 0, 202, 136, 203, 0,
	137, 138, 204, 139, 140, 0, 141, 142, 143, 0,
	144, 0, 145, 146, 205, 147, 0, 148, 149, 0,
	150, 252, 0, 151, 152, 0, 153, 206, 154, 0,
	155, 157, 207, 156, 208, 0, 0, 158, 159, 0,
	254, 209, 0, 0, 253, 210, 211, 0, 160, 161,
	162, 163, 0, 86, 164, 165, 0, 0, 166, 167,
	168, 212, 213, 0, 169, 89, 90, 0, 91, 170,
	171, 172, 173, 0, 0, 0, 0, 92, 93, 174,
	175, 176, 94, 177, 178, 0, 95, 179, 96, 0,
	0, 180, 181, 0, 182, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 183,
	108, 184, 185, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 186, 112, 187, 0, 0,
	113, 114, 188, 115, 0, 0, 0, 0, 0, 116,
	189, 0, 190, 0, 117, 1014, 192, 0, 0, 0,
	0, 118, 193, 194, 195, 0, 196, 0, 0, 119,
	0, 120, 0, 0, 197, 0, 121, 0, 0, 250,
	0, 0, 0, 122, 123, 124, 125, 251, 0, 126,
	127, 0, 128, 0, 198, 129, 199, 130, 131, 0,
	0, 0, 0, 0, 132, 200, 0, 133, 0, 201,
	134, 135, 0, 202, 136, 203, 0, 137, 138, 204,
	139, 140, 0, 141, 142, 143, 0, 144, 0, 145,
	146, 205, 147, 0, 148, 149, 0, 150, 252, 0,
	151, 152, 0, 153, 206, 154, 0, 155, 157, 207,
	156, 208, 0, 0, 158, 159, 0, 254, 209, 0,
	0, 253, 210, 211, 0, 160, 161, 162, 163, 0,
	86, 164, 165, 0, 0, 166, 167, 168, 212, 213,
	0, 169, 89, 90, 0, 91, 170, 171, 172, 173,
	0, 0, 0, 0, 92, 93, 174, 175, 176, 94,
	177, 178, 0, 95, 179, 96, 0, 0, 180, 181,
	0, 182, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 183, 108, 184, 185,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 0,
	0, 0, 186, 112, 187, 0, 0, 113, 114, 188,
	115, 0, 0, 0, 0, 0, 116, 189, 0, 190,
	0, 117, 1012, 192, 0, 0, 0, 0, 118, 193,
	194, 195, 0, 196, 0, 0, 119, 0, 120, 0,
	0, 197, 0, 121, 0, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 0, 126, 127, 0, 128,
	0, 198, 129, 199, 130, 131, 0, 0, 0, 0,
	0, 132, 200, 0, 133, 0, 201, 134, 135, 0,
	202, 136, 203, 0, 137, 138, 204, 139, 140, 0,
	141, 142, 143, 0, 144, 0, 145, 146, 205, 147,
	0, 148, 149, 0, 150, 252, 0, 151, 152, 0,
	153, 206, 154, 0, 155, 157, 207, 156, 208, 0,
	0, 158, 159, 0, 254, 209, 0, 0, 253, 210,
	211, 0, 160, 161, 162, 163, 0, 86, 164, 165,
	0, 0, 166, 167, 168, 212, 213, 0, 169, 89,
	90, 0, 91, 170, 171, 172, 173, 0, 0, 0,
	0, 92, 93, 174, 175, 176, 94, 177, 178, 0,
	95, 179, 96, 0, 0, 180, 181, 0, 182, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 183, 108, 184, 185, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 186,
	112, 187, 0, 0, 113, 114, 188, 115, 0, 0,
	0, 0, 0, 116, 189, 0, 190, 0, 117, 1003,
	192, 0, 0, 0, 0, 118, 193, 194, 195, 0,
	196, 0, 0, 119, 0, 120, 0, 0, 197, 0,
	121, 0, 0, 250, 0, 0, 0, 122, 123, 124,
	125, 251, 0, 126, 127, 0, 128, 0, 198, 129,
	199, 130, 131, 0, 0, 0, 0, 0, 132, 200,
	0, 133, 0, 201, 134, 135, 0, 202, 136, 203,
	0, 137, 138, 204, 139, 140, 0, 141, 142, 143,
	0, 144, 0, 145, 146, 205, 147, 0, 148, 149,
	0, 150, 252, 0, 151, 152, 0, 153, 206, 154,
	0, 155, 157, 207, 156, 208, 0, 0, 158, 159,
	0, 254, 209, 0, 0, 253, 210, 211, 0, 160,
	161, 162, 163, 0, 86, 164, 165, 0, 0, 166,
	167, 168, 212, 213, 0, 169, 89, 90, 0, 91,
	170, 171, 172, 173, 0, 0, 0, 0, 92, 93,
	174, 175, 176, 94, 177, 178, 0, 95, 179, 96,
	0, 0, 180, 181, 0, 182, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	183, 108, 184, 185, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 0, 0, 0, 186, 112, 187, 0,
	0, 113, 114, 188, 115, 0, 0, 0, 0, 0,
	116, 189, 0, 190, 0, 117, 623, 192, 0, 0,
	0, 0, 118, 193, 194, 195, 0, 196, 0, 0,
	119, 0, 120, 0, 0, 197, 0, 121, 0, 0,
	250, 0, 0, 0, 122, 123, 124, 125, 251, 0,
	126, 127, 0, 128, 0, 198, 129, 199, 130, 131,
	0, 0, 0, 0, 0, 132, 200, 0, 133, 0,
	201, 134, 135, 0, 202, 136, 203, 0, 137, 138,
	204, 139, 140, 0, 141, 142, 143, 0, 144, 0,
	145, 146, 205, 147, 0, 148, 149, 0, 150, 252,
	0, 151, 152, 0, 153, 206, 154, 0, 155, 157,
	207, 156, 208, 0, 0, 158, 159, 0, 254, 209,
	0, 0, 253, 210, 211, 0, 160, 161, 162, 163,
	0, 86, 164, 165, 0, 0, 166, 167, 168, 212,
	213, 0, 169, 89, 90, 0, 91, 170, 171, 172,
	173, 0, 480, 0, 0, 92, 93, 174, 175, 176,
	94, 177, 178, 0, 95, 179, 96, 0, 0, 180,
	181, 0, 182, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 183, 108, 184,
	185, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 186, 112, 187, 0, 0, 113, 114,
	188, 115, 0, 0, 0, 0, 0, 116, 189, 0,
	190, 0, 117, 191, 192, 0, 0, 0, 0, 118,
	193, 194, 195, 0, 196, 0, 0, 119, 0, 120,
	0, 0, 197, 0, 121, 0, 0, 250, 0, 0,
	0, 122, 123, 124, 125, 251, 0, 126, 127, 0,
	128, 0, 198, 129, 199, 130, 131, 0, 0, 0,
	0, 0, 132, 200, 0, 133, 0, 201, 134, 135,
	0, 202, 136, 203, 0, 137, 138, 204, 139, 140,
	0, 141, 142, 143, 0, 144, 0, 145, 146, 205,
	147, 0, 148, 149, 0, 150, 252, 0, 0, 152,
	0, 153, 206, 154, 0, 155, 157, 207, 156, 208,
	0, 0, 158, 159, 0, 254, 209, 0, 0, 253,
	210, 211, 0, 160, 161, 162, 163, 0, 86, 164,
	165, 0, 0, 166, 167, 168, 212, 213, 0, 169,
	89, 90, 0, 91, 170, 171, 172, 173, 0, 0,
	0, 0, 92, 93, 174, 175, 176, 94, 177, 178,
	0, 95, 179, 96, 0, 0, 180, 181, 0, 182,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 183, 108, 184, 185, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 0, 0, 0,
	186, 112, 187, 0, 0, 113, 114, 188, 115, 0,
	0, 0, 0, 0, 116, 189, 0, 190, 0, 117,
	338, 192, 0, 0, 0, 0, 118, 193, 194, 195,
	0, 196, 0, 0, 119, 0, 120, 0, 0, 197,
	0, 121, 0, 0, 250, 0, 0, 0, 122, 123,
	124, 125, 251, 0, 126, 127, 0, 128, 0, 198,
	129, 199, 130, 131, 0, 0, 0, 0, 0, 132,
	200, 0, 133, 0, 201, 134, 135, 0, 202, 136,
	203, 0, 137, 138, 204, 139, 140, 0, 141, 142,
	143, 0, 144, 0, 145, 146, 205, 147, 0, 148,
	149, 0, 150, 252, 0, 151, 152, 0, 153, 206,
	154, 0, 155, 157, 207, 156, 208, 0, 0, 158,
	159, 0, 254, 209, 0, 0, 253, 210, 211, 0,
	160, 161, 162, 163, 0, 86, 164, 165, 0, 0,
	166, 167, 168, 212, 213, 0, 169, 89, 90, 0,
	91, 170, 171, 172, 173, 0, 0, 0, 0, 92,
	93, 174, 175, 176, 94, 177, 178, 0, 95, 179,
	96, 0, 0, 180, 181, 0, 182, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 183, 108, 184, 185, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 186, 112, 187,
	0, 0, 113, 114, 188, 115, 0, 0, 0, 0,
	0, 116, 189, 0, 190, 0, 117, 335, 192, 0,
	0, 0, 0, 118, 193, 194, 195, 0, 196, 0,
	0, 119, 0, 120, 0, 0, 197, 0, 121, 0,
	0, 250, 0, 0, 0, 122, 123, 124, 125, 251,
	0, 126, 127, 0, 128, 0, 198, 129, 199, 130,
	131, 0, 0, 0, 0, 0, 132, 200, 0, 133,
	0, 201, 134, 135, 0, 202, 136, 203, 0, 137,
	138, 204, 139, 140, 0, 141, 142, 143, 0, 144,
	0, 145, 146, 205, 147, 0, 148, 149, 0, 150,
	252, 0, 151, 152, 0, 153, 206, 154, 0, 155,
	157, 207, 156, 208, 0, 0, 158, 159, 0, 254,
	209, 0, 0, 253, 210, 211, 0, 160, 161, 162,
	163, 0, 86, 164, 165, 0, 0, 166, 167, 168,
	212, 213, 0, 169, 89, 90, 0, 91, 170, 171,
	172, 173, 0, 0, 0, 0, 92, 93, 174, 175,
	176, 94, 177, 178, 0, 95, 179, 96, 0, 0,
	180, 181, 0, 182, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 183, 108,
	184, 185, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 0, 0, 0, 186, 112, 187, 0, 0, 113,
	114, 188, 115, 0, 0, 0, 0, 0, 116, 189,
	0, 190, 0, 117, 191, 192, 0, 0, 0, 0,
	118, 193, 194, 195, 0, 196, 0, 0, 119, 0,
	120, 0, 0, 197, 0, 121, 0, 0, 250, 0,
	0, 0, 122, 123, 124, 125, 83, 0, 126, 127,
	0, 128, 0, 198, 129, 199, 130, 131, 0, 0,
	0, 0, 0, 132, 200, 0, 133, 0, 201, 134,
	135, 0, 202, 136, 203, 0, 137, 138, 204, 139,
	140, 0, 141, 142, 143, 0, 144, 0, 145, 146,
	205, 147, 0, 148, 149, 0, 150, 252, 0, 151,
	152, 0, 153, 206, 154, 0, 155, 157, 207, 156,
	208, 0, 0, 158, 159, 0, 82, 209, 0, 0,
	78, 210, 211, 0, 160, 161, 162, 163, 0, 86,
	164, 165, 0, 0, 166, 167, 168, 212, 213, 0,
	169, 89, 90, 0, 91, 170, 171, 172, 173, 0,
	0, 0, 0, 92, 93, 174, 175, 176, 94, 177,
	178, 0, 95, 179, 96, 0, 0, 180, 181, 0,
	182, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 183, 108, 184, 185, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 186, 112, 187, 0, 0, 113, 114, 188, 115,
	0, 0, 0, 0, 0, 116, 189, 0, 190, 0,
	117, 283, 192, 0, 0, 0, 0, 118, 193, 194,
	195, 0, 196, 0, 0, 119, 0, 120, 0, 0,
	197, 0, 121, 0, 0, 250, 0, 0, 0, 122,
	123, 124, 125, 251, 0, 126, 127, 0, 128, 0,
	198, 129, 199, 130, 131, 0, 0, 0, 0, 0,
	132, 200, 0, 133, 0, 201, 134, 135, 0, 202,
	136, 203, 0, 137, 138, 204, 139, 140, 0, 141,
	142, 143, 0, 144, 0, 145, 146, 205, 147, 0,
	148, 149, 0, 150, 252, 0, 151, 152, 0, 153,
	206, 154, 0, 155, 157, 207, 156, 208, 0, 0,
	158, 159, 0, 254, 209, 0, 0, 253, 210, 211,
	0, 160, 161, 162, 163, 0, 86, 164, 165, 0,
	0, 166, 167, 168, 212, 213, 0, 169, 89, 90,
	0, 91, 170, 171, 172, 173, 0, 0, 0, 0,
	92, 93, 174, 175, 176, 94, 177, 178, 0, 95,
	179, 96, 0, 0, 180, 181, 0, 182, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 183, 108, 184, 185, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 0, 0, 0, 186, 112,
	187, 0, 0, 113, 114, 188, 115, 0, 0, 0,
	0, 0, 116, 189, 0, 190, 0, 117, 280, 192,
	0, 0, 0, 0, 118, 193, 194, 195, 0, 196,
	0, 0, 119, 0, 120, 0, 0, 197, 0, 121,
	0, 0, 250, 0, 0, 0, 122, 123, 124, 125,
	251, 0, 126, 127, 0, 128, 0, 198, 129, 199,
	130, 131, 0, 0, 0, 0, 0, 132, 200, 0,
	133, 0, 201, 134, 135, 0, 202, 136, 203, 0,
	137, 138, 204, 139, 140, 0, 141, 142, 143, 0,
	144, 0, 145, 146, 205, 147, 0, 148, 149, 0,
	150, 252, 0, 151, 152, 0, 153, 206, 154, 0,
	155, 157, 207, 156, 208, 0, 0, 158, 159, 0,
	254, 209, 0, 0, 253, 210, 211, 0, 160, 161,
	162, 163, 0, 86, 164, 165, 0, 0, 166, 167,
	168, 212, 213, 0, 169, 89, 90, 0, 91, 170,
	171, 172, 173, 0, 0, 0, 0, 92, 93, 174,
	175, 176, 94, 177, 178, 0, 95, 179, 96, 0,
	0, 180, 181, 0, 182, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 183,
	108, 184, 185, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 186, 112, 187, 0, 0,
	113, 114, 188, 115, 0, 0, 0, 0, 0, 116,
	189, 0, 190, 0, 117, 278, 192, 0, 0, 0,
	0, 118, 193, 194, 195, 0, 196, 0, 0, 119,
	0, 120, 0, 0, 197, 0, 121, 0, 0, 250,
	0, 0, 0, 122, 123, 124, 125, 251, 0, 126,
	127, 0, 128, 0, 198, 129, 199, 130, 131, 0,
	0, 0, 0, 0, 132, 200, 0, 133, 0, 201,
	134, 135, 0, 202, 136, 203, 0, 137, 138, 204,
	139, 140, 0, 141, 142, 143, 0, 144, 0, 145,
	146, 205, 147, 0, 148, 149, 0, 150, 252, 0,
	151, 152, 0, 153, 206, 154, 0, 155, 157, 207,
	156, 208, 0, 0, 158, 159, 0, 254, 209, 0,
	0, 253, 210, 211, 0, 160, 161, 162, 163, 0,
	86, 164, 165, 0, 0, 166, 167, 168, 212, 213,
	0, 169, 89, 90, 0, 91, 170, 171, 172, 173,
	0, 0, 0, 0, 92, 93, 174, 175, 176, 94,
	177, 178, 0, 95, 179, 96, 0, 0, 180, 181,
	0, 182, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 183, 108, 184, 185,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 0,
	0, 0, 186, 112, 187, 0, 0, 113, 114, 188,
	115, 0, 0, 0, 0, 0, 116, 189, 0, 190,
	0, 117, 272, 192, 0, 0, 0, 0, 118, 193,
	194, 195, 0, 196, 0, 0, 119, 0, 120, 0,
	0, 197, 0, 121, 0, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 0, 126, 127, 0, 128,
	0, 198, 129, 199, 130, 131, 0, 0, 0, 0,
	0, 132, 200, 0, 133, 0, 201, 134, 135, 0,
	202, 136, 203, 0, 137, 138, 204, 139, 140, 0,
	141, 142, 143, 0, 144, 0, 145, 146, 205, 147,
	0, 148, 149, 0, 150, 252, 0, 151, 152, 0,
	153, 206, 154, 0, 155, 157, 207, 156, 208, 0,
	0, 158, 159, 0, 254, 209, 0, 0, 253, 210,
	211, 0, 160, 161, 162, 163, 0, 86, 164, 165,
	0, 0, 166, 167, 168, 212, 213, 0, 169, 89,
	90, 0, 91, 170, 171, 172, 173, 0, 0, 0,
	0, 92, 93, 174, 175, 176, 94, 177, 178, 0,
	95, 179, 96, 0, 0, 180, 181, 0, 182, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 183, 108, 184, 185, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 186,
	112, 187, 0, 0, 113, 114, 188, 115, 0, 0,
	0, 0, 0, 116, 189, 0, 190, 0, 117, 191,
	192, 0, 0, 0, 0, 118, 193, 194, 195, 0,
	196, 0, 0, 119, 0, 120, 0, 0, 197, 0,
	121, 0, 0, 250, 0, 0, 0, 122, 123, 124,
	125, 251, 0, 126, 127, 0, 128, 0, 198, 129,
	199, 130, 131, 0, 0, 0, 0, 0, 132, 200,
	0, 133, 0, 201, 134, 135, 0, 202, 136, 203,
	0, 137, 138, 204, 247, 140, 0, 141, 142, 143,
	0, 144, 0, 145, 146, 205, 147, 0, 148, 149,
	0, 150, 252, 0, 151, 152, 0, 153, 206, 154,
	0, 155, 157, 207, 156, 208, 0, 0, 158, 159,
	0, 254, 209, 0, 0, 253, 210, 211, 0, 160,
	161, 162, 163, 0, 86, 164, 165, 0, 0, 166,
	167, 168, 212, 213, 0, 169, 89, 90, 0, 91,
	170, 171, 172, 173, 0, 0, 0, 0, 92, 93,
	174, 175, 176, 94, 177, 178, 0, 95, 179, 96,
	0, 0, 180, 181, 0, 182, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	183, 108, 184, 185, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 0, 0, 0, 186, 112, 187, 0,
	0, 113, 114, 188, 115, 0, 0, 0, 0, 0,
	116, 189, 0, 190, 0, 117, 191, 192, 0, 0,
	0, 0, 118, 193, 194, 195, 0, 196, 0, 0,
	119, 0, 120, 0, 0, 197, 0, 121, 0, 0,
	76, 0, 0, 0, 122, 123, 124, 125, 83, 0,
	126, 127, 0, 128, 0, 198, 129, 199, 130, 131,
	0, 0, 0, 0, 0, 132, 200, 0, 133, 0,
	201, 134, 135, 0, 202, 136, 203, 0, 137, 138,
	204, 139, 140, 0, 141, 142, 143, 0, 144, 0,
	145, 146, 205, 147, 0, 148, 149, 0, 150, 77,
	0, 151, 152, 0, 153, 206, 154, 0, 155, 157,
	207, 156, 208, 0, 0, 158, 159, 0, 82, 209,
	0, 0, 78, 210, 211, 0, 160, 161, 162, 163,
	0, 86, 164, 165, 0, 0, 166, 167, 168, 212,
	213, 0, 169, 89, 90, 0, 91, 170, 171, 172,
	173, 0, 0, 0, 0, 92, 93, 174, 175, 176,
	94, 177, 178, 0, 95, 179, 96, 0, 0, 180,
	181, 0, 182, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 183, 108, 184,
	185, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 186, 112, 187, 0, 0, 113, 114,
	188, 115, 0, 0, 0, 0, 0, 116, 189, 0,
	190, 0, 117, 191, 192, 0, 0, 0, 0, 118,
	193, 194, 195, 0, 196, 0, 0, 119, 0, 120,
	0, 0, 197, 0, 121, 0, 0, 250, 0, 0,
	0, 122, 123, 124, 125, 251, 0, 126, 127, 0,
	128, 0, 198, 129, 199, 130, 131, 0, 0, 0,
	0, 0, 132, 200, 0, 133, 0, 201, 134, 0,
	0, 202, 136, 203, 0, 0, 138, 204, 139, 140,
	0, 141, 142, 143, 0, 144, 0, 145, 146, 205,
	0, 0, 148, 149, 0, 150, 252, 0, 151, 152,
	0, 153, 206, 154, 0, 155, 157, 207, 156, 208,
	0, 0, 158, 159, 0, 254, 209, 0, 0, 253,
	210, 211, 0, 160, 161, 162, 163, 0, 0, 164,
	165, 0, 0, 166, 167, 168, 212, 213, 647, 169,
	665, 666, 667, 0, 170, 171, 172, 173, 0, 0,
	668, 0, 0, 0, 0, 0, 649, 0, 674, 0,
	0, 0, 0, 0, 647, 0, 665, 666, 667, 0,
	0, 0, 0, 0, 648, 0, 668, 0, 0, 0,
	662, 0, 649, 0, 674, 0, 0, 0, 0, 0,
	0, 647, 0, 665, 666, 667, 0, 0, 0, 0,
	648, 0, 0, 668, 0, 0, 662, 0, 0, 649,
	647, 674, 665, 666, 667, 0, 0, 0, 0, 0,
	0, 0, 668, 0, 0, 0, 0, 648, 649, 0,
	674, 0, 0, 662, 0, 0, 675, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 648, 673, 0, 0,
	0, 0, 662, 0, 0, 0, 670, 0, 0, 0,
	0, 663, 675, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 673, 0, 0, 0, 0, 0, 0,
	0, 669, 670, 0, 0, 0, 0, 663, 0, 675,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	673, 0, 0, 0, 0, 0, 0, 669, 675, 670,
	0, 0, 664, 0, 663, 0, 0, 0, 0, 673,
	0, 672, 0, 0, 0, 0, 0, 0, 670, 0,
	0, 0, 0, 663, 669, 0, 0, 0, 664, 0,
	0, 0, 0, 0, 0, 0, 0, 672, 0, 0,
	0, 0, 0, 669, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 664, 0, 0, 0, 671,
	0, 659, 660, 661, 672, 658, 655, 656, 657, 650,
	651, 652, 653, 654, 664, 0, 0, 0, 0, 0,
	0, 0, 1175, 672, 0, 671, 0, 659, 660, 661,
	0, 658, 655, 656, 657, 650, 651, 652, 653, 654,
	0, 0, 0, 0, 0, 0, 0, 0, 1174, 0,
	0, 0, 671, 0, 659, 660, 661, 0, 658, 655,
	656, 657, 650, 651, 652, 653, 654, 0, 0, 0,
	0, 671, 1533, 659, 660, 661, 0, 658, 655, 656,
	657, 650, 651, 652, 653, 654, 647, 0, 665, 666,
	667, 1532, 0, 0, 0, 0, 0, 0, 668, 0,
	0, 0, 0, 0, 649, 647, 674, 665, 666, 667,
	0, 0, 0, 0, 0, 0, 0, 668, 0, 0,
	0, 0, 648, 649, 0, 674, 0, 0, 662, 0,
	0, 0, 647, 0, 665, 666, 667, 0, 0, 0,
	0, 648, 0, 0, 668, 0, 0, 662, 0, 0,
	649, 0, 674, 0, 0, 0, 0, 0, 647, 0,
	665, 666, 667, 0, 0, 0, 0, 0, 648, 0,
	668, 0, 0, 0, 662, 0, 649, 0, 674, 0,
	0, 0, 0, 0, 675, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 648, 673, 0, 0, 0, 0,
	662, 0, 0, 675, 670, 0, 0, 0, 0, 663,
	0, 0, 0, 0, 673, 0, 0, 0, 0, 0,
	0, 0, 0, 670, 0, 0, 0, 0, 663, 669,
	675, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 673, 0, 0, 0, 0, 0, 0, 669, 0,
	670, 0, 0, 0, 0, 663, 675, 0, 0, 0,
	664, 0, 0, 0, 0, 0, 0, 673, 0, 672,
	0, 0, 0, 0, 0, 669, 670, 0, 0, 664,
	0, 663, 0, 0, 0, 0, 0, 0, 672, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 669, 0, 0, 0, 0, 664, 0, 0, 0,
	0, 0, 0, 0, 0, 672, 0, 671, 0, 659,
	660, 661, 0, 658, 655, 656, 657, 650, 651, 652,
	653, 654, 664, 0, 0, 0, 671, 1519, 659, 660,
	661, 672, 658, 655, 656, 657, 650, 651, 652, 653,
	654, 0, 0, 0, 0, 0, 1496, 0, 0, 0,
	0, 0, 0, 671, 0, 659, 660, 661, 0, 658,
	655, 656, 657, 650, 651, 652, 653, 654, 0, 0,
	0, 0, 0, 1491, 0, 0, 0, 0, 0, 671,
	0, 659, 660, 661, 0, 658, 655, 656, 657, 650,
	651, 652, 653, 654, 647, 0, 665, 666, 667, 1487,
	0, 0, 0, 0, 0, 0, 668, 0, 0, 0,
	0, 0, 649, 647, 674, 665, 666, 667, 0, 0,
	0, 0, 0, 0, 0, 668, 0, 0, 0, 0,
	648, 649, 0, 674, 0, 0, 662, 0, 0, 0,
	647, 0, 665, 666, 667, 0, 0, 0, 0, 648,
	0, 0, 668, 0, 0, 662, 0, 0, 649, 0,
	674, 0, 0, 0, 0, 0, 647, 0, 665, 666,
	667, 0, 0, 0, 0, 0, 648, 0, 668, 0,
	0, 0, 662, 0, 649, 0, 674, 0, 0, 0,
	0, 0, 675, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 648, 673, 0, 0, 0, 0, 662, 0,
	0, 675, 670, 0, 0, 0, 0, 663, 0, 0,
	0, 0, 673, 0, 0, 0, 0, 0, 0, 0,
	0, 670, 0, 0, 0, 0, 663, 669, 675, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 673,
	0, 0, 0, 0, 0, 0, 669, 0, 670, 0,
	0, 0, 0, 663, 675, 0, 0, 0, 664, 0,
	0, 0, 0, 0, 0, 673, 0, 672, 0, 0,
	0, 0, 0, 669, 670, 0, 0, 664, 0, 663,
	0, 0, 0, 0, 0, 0, 672, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 669,
	0, 0, 0, 0, 664, 0, 0, 0, 0, 0,
	0, 0, 0, 672, 0, 671, 0, 659, 660, 661,
	0, 658, 655, 656, 657, 650, 651, 652, 653, 654,
	664, 0, 0, 0, 671, 1429, 659, 660, 661, 672,
	658, 655, 656, 657, 650, 651, 652, 653, 654, 0,
	0, 0, 0, 0, 1428, 0, 0, 0, 0, 0,
	0, 671, 0, 659, 660, 661, 0, 658, 655, 656,
	657, 650, 651, 652, 653, 654, 0, 0, 0, 0,
	0, 1404, 0, 0, 0, 0, 0, 671, 0, 659,
	660, 661, 0, 658, 655, 656, 657, 650, 651, 652,
	653, 654, 647, 0, 665, 666, 667, 1345, 0, 0,
	0, 0, 0, 0, 668, 0, 0, 0, 0, 0,
	649, 647, 674, 665, 666, 667, 0, 0, 0, 0,
	0, 0, 0, 668, 0, 0, 0, 0, 648, 649,
	0, 674, 0, 0, 662, 0, 0, 0, 647, 0,
	665, 666, 667, 0, 0, 0, 0, 648, 0, 0,
	668, 0, 0, 662, 0, 0, 649, 0, 674, 0,
	0, 0, 0, 0, 647, 0, 665, 666, 667, 0,
	0, 0, 0, 0, 648, 0, 668, 0, 0, 0,
	662, 0, 649, 0, 674, 0, 0, 0, 0, 0,
	675, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	648, 673, 0, 0, 0, 0, 662, 0, 0, 675,
	670, 0, 0, 0, 0, 663, 0, 0, 0, 0,
	673, 0, 0, 0, 0, 0, 0, 0, 0, 670,
	0, 0, 0, 0, 663, 669, 675, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 673, 0, 0,
	0, 0, 0, 0, 669, 0, 670, 0, 0, 0,
	0, 663, 675, 0, 0, 0, 664, 0, 0, 0,
	0, 0, 0, 673, 0, 672, 0, 0, 0, 0,
	0, 669, 670, 0, 0, 664, 0, 663, 0, 0,
	0, 0, 0, 0, 672, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 669, 0, 0,
	0, 0, 664, 0, 0, 0, 0, 0, 0, 0,
	0, 672, 0, 671, 0, 659, 660, 661, 0, 658,
	655, 656, 657, 650, 651, 652, 653, 654, 664, 0,
	0, 0, 671, 1283, 659, 660, 661, 672, 658, 655,
	656, 657, 650, 651, 652, 653, 654, 0, 0, 0,
	0, 0, 1258, 0, 0, 0, 0, 0, 0, 671,
	0, 659, 660, 661, 0, 658, 655, 656, 657, 650,
	651, 652, 653, 654, 1136, 0, 1152, 1153, 1154, 918,
	0, 0, 0, 0, 0, 671, 1251, 659, 660, 661,
	0, 658, 655, 656, 657, 650, 651, 652, 653, 654,
	0, 0, 647, 1329, 665, 666, 667, 0, 0, 0,
	0, 0, 0, 0, 668, 0, 1149, 0, 0, 0,
	649, 647, 674, 665, 666, 667, 0, 0, 0, 0,
	0, 0, 0, 668, 0, 0, 0, 0, 648, 649,
	0, 674, 0, 0, 662, 0, 0, 0, 0, 647,
	0, 665, 666, 667, 0, 0, 0, 648, 0, 0,
	0, 668, 0, 662, 0, 822, 0, 649, 0, 674,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1155, 0, 648, 1593, 0, 0, 0,
	0, 662, 0, 0, 0, 0, 0, 1150, 0, 0,
	675, 0, 0, 0, 0, 0, 1166, 0, 1165, 0,
	0, 673, 0, 0, 0, 0, 823, 0, 0, 675,
	670, 0, 0, 0, 0, 663, 0, 0, 0, 0,
	673, 0, 0, 0, 0, 0, 0, 0, 0, 670,
	0, 0, 0, 0, 663, 669, 0, 675, 1151, 0,
	0, 0, 0, 0, 0, 0, 0, 1592, 673, 0,
	0, 0, 0, 0, 669, 0, 0, 670, 0, 0,
	0, 0, 663, 0, 0, 0, 664, 0, 0, 0,
	0, 0, 0, 0, 0, 672, 0, 0, 0, 0,
	0, 0, 669, 0, 0, 664, 0, 0, 0, 0,
	0, 0, 0, 0, 672, 0, 0, 1146, 1147, 1148,
	0, 1145, 1142, 1143, 1144, 1137, 1138, 1139, 1140, 1141,
	0, 0, 0, 664, 0, 0, 0, 0, 0, 0,
	0, 0, 672, 671, 0, 659, 660, 661, 0, 658,
	655, 656, 657, 650, 651, 652, 653, 654, 0, 0,
	0, 0, 671, 0, 659, 660, 661, 0, 658, 655,
	656, 657, 650, 651, 652, 653, 654, 1136, 0, 1152,
	1153, 1154, 0, 0, 0, 0, 0, 0, 0, 0,
	671, 0, 659, 660, 661, 0, 658, 655, 656, 657,
	650, 651, 652, 653, 654, 678, 0, 0, 0, 0,
	0, 647, 0, 665, 666, 667, 0, 0, 0, 1149,
	0, 0, 0, 668, 0, 0, 677, 0, 0, 649,
	647, 674, 665, 666, 667, 0, 0, 0, 0, 0,
	0, 0, 668, 0, 0, 0, 0, 648, 649, 0,
	674, 0, 0, 662, 0, 0, 0, 647, 0, 665,
	666, 667, 0, 0, 0, 0, 648, 0, 0, 668,
	0, 0, 662, 0, 0, 649, 0, 674, 0, 0,
	0, 0, 0, 647, 0, 665, 666, 667, 0, 0,
	0, 0, 0, 648, 0, 668, 0, 0, 0, 662,
	1150, 649, 0, 674, 0, 0, 0, 0, 0, 675,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 648,
	673, 0, 0, 0, 0, 662, 0, 0, 675, 670,
	0, 0, 0, 0, 663, 0, 0, 0, 0, 673,
	0, 0, 0, 0, 1172, 0, 0, 0, 670, 0,
	0, 1151, 0, 663, 669, 675, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 673, 0, 0, 0,
	0, 0, 0, 669, 242, 670, 0, 0, 0, 0,
	663, 675, 0, 0, 0, 664, 0, 0, 0, 0,
	0, 0, 673, 0, 672, 0, 0, 0, 0, 0,
	669, 670, 0, 0, 664, 0, 663, 0, 0, 0,
	1146, 1147, 1148, 672, 1145, 1142, 1143, 1144, 1137, 1138,
	1139, 1140, 1141, 0, 0, 0, 669, 0, 0, 0,
	0, 664, 0, 0, 0, 0, 0, 0, 0, 0,
	672, 0, 671, 0, 659, 660, 661, 0, 658, 655,
	656, 657, 650, 651, 652, 653, 654, 664, 0, 0,
	0, 671, 0, 659, 660, 661, 672, 658, 655, 656,
	657, 650, 651, 652, 653, 654, 0, 0, 0, 0,
	1277, 0, 0, 0, 0, 0, 0, 0, 671, 0,
	659, 660, 661, 0, 658, 655, 656, 657, 650, 651,
	652, 653, 654, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 671, 0, 659, 660, 661, 0,
	658, 655, 656, 657, 650, 651, 652, 653, 654, 647,
	0, 665, 666, 667, 0, 0, 0, 0, 0, 0,
	0, 668, 0, 0, 1167, 0, 0, 649, 647, 674,
	665, 666, 667, 0, 0, 0, 0, 0, 0, 0,
	668, 0, 0, 0, 0, 648, 649, 0, 674, 0,
	0, 662, 0, 0, 0, 0, 647, 0, 665, 666,
	667, 0, 0, 0, 648, 0, 0, 0, 668, 0,
	662, 1129, 0, 0, 649, 0, 674, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 648, 0, 0, 0, 0, 0, 662, 0,
	0, 0, 0, 0, 0, 0, 0, 675, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 673, 0,
	0, 0, 0, 0, 0, 0, 675, 670, 0, 0,
	0, 0, 663, 0, 0, 0, 0, 673, 0, 0,
	0, 0, 0, 0, 0, 0, 670, 0, 0, 0,
	0, 663, 669, 0, 675, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 673, 0, 0, 0, 0,
	0, 669, 0, 0, 670, 0, 0, 0, 0, 663,
	0, 1134, 0, 664, 0, 0, 0, 0, 0, 0,
	0, 0, 672, 0, 0, 0, 0, 0, 0, 669,
	0, 0, 664, 0, 0, 0, 0, 0, 0, 0,
	0, 672, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	664, 0, 0, 0, 0, 0, 0, 0, 0, 672,
	671, 0, 659, 660, 661, 0, 658, 655, 656, 657,
	650, 651, 652, 653, 654, 0, 0, 0, 0, 671,
	0, 659, 660, 661, 0, 658, 655, 656, 657, 650,
	651, 652, 653, 654, 1136, 0, 1152, 1153, 1154, 0,
	0, 0, 0, 0, 0, 0, 0, 671, 0, 659,
	660, 661, 0, 658, 655, 656, 657, 650, 651, 652,
	653, 654, 647, 0, 665, 666, 667, 0, 0, 0,
	0, 0, 0, 0, 668, 0, 1149, 0, 0, 0,
	649, 647, 674, 665, 666, 667, 0, 0, 0, 0,
	0, 0, 0, 668, 0, 0, 0, 0, 648, 649,
	0, 674, 0, 0, 662, 0, 0, 0, 647, 0,
	665, 666, 667, 0, 0, 0, 0, 648, 0, 0,
	0, 0, 0, 662, 0, 0, 649, 0, 674, 0,
	0, 0, 1156, 0, 1136, 0, 1152, 1153, 1154, 0,
	0, 0, 0, 1155, 648, 0, 0, 0, 0, 0,
	662, 0, 0, 0, 0, 0, 0, 1150, 0, 0,
	675, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 673, 0, 0, 0, 0, 1149, 0, 0, 675,
	670, 0, 0, 0, 0, 663, 0, 0, 0, 0,
	673, 0, 0, 0, 0, 0, 0, 0, 0, 670,
	0, 0, 0, 0, 663, 669, 675, 0, 1151, 0,
	0, 0, 0, 0, 0, 0, 0, 673, 0, 0,
	0, 0, 0, 0, 0, 0, 670, 0, 0, 0,
	0, 663, 0, 0, 0, 0, 664, 0, 0, 0,
	0, 0, 0, 1155, 0, 672, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 664, 0, 1150, 0, 0,
	0, 0, 0, 0, 672, 0, 0, 1146, 1147, 1148,
	0, 1145, 1142, 1143, 1144, 1137, 1138, 1139, 1140, 1141,
	0, 0, 664, 0, 0, 0, 0, 0, 0, 0,
	0, 672, 0, 671, 0, 659, 660, 661, 0, 658,
	655, 656, 657, 650, 651, 652, 653, 654, 1151, 0,
	0, 0, 671, 0, 659, 660, 661, 0, 658, 655,
	656, 657, 650, 651, 652, 653, 654, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 671,
	0, 659, 660, 661, 0, 658, 655, 656, 657, 650,
	651, 652, 653, 654, 850, 865, 842, 858, 857, 0,
	0, 843, 0, 0, 0, 867, 866, 1146, 1147, 1148,
	0, 1145, 1142, 1143, 1144, 1137, 1138, 1139, 1140, 1141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 863, 0, 855, 854, 0, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 852, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 846, 847, 848, 0,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	856, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 851, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 849, 0,
	0, 0, 0, 845, 0, 0, 0, 0, 0, 844,
	0, 0, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 868,
}
var sqlPact = [...]int{

	2668, -1000, 1, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 778,
	-1000, -1000, -1000, 507, 746, 36, 1682, 1682, -1000, -1000,
	15200, 1227, 379, 379, 379, 434, 580, 113, -1000, 731,
	-4, 14983, 12162, 1141, -1, 11511, 248, 2668, 11945, 12162,
	14766, 991, 883, 11511, 14549, 14332, 14115, -1000, 8044, -1000,
	-1000, -1000, -1000, 737, -1000, -3, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 726, -1000, 13898, 13898, 877, -1000,
	-1000, 432, 305, 1132, -1000, 6, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 987, -1000, 723, 981,
	979, 304, 882, -1000, 877, -1000, -1000, -1000, 11511, -1000,
	13681, 927, 13464, -1000, 731, -1000, -1000, -1000, 771, 1123,
	1123, 1123, 1145, 83, 82, 113, -5, 12162, -1000, 249,
	-1000, -1000, -1000, -1000, -1000, -5, 6120, 6120, -1000, -1000,
	248, -1000, 264, 10386, -148, -1000, 5642, -1000, 831, 1035,
	519, 517, 1033, 11511, 12162, 453, 13247, -1000, 1032, 86,
	1031, -1000, -34, 1029, -1000, -12, -1000, -1000, -1000, -1000,
	-1000, -1000, 248, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11728, 899, 11728, -1000,
	-1000, -1000, 847, 8520, 8283, 1077, 566, -1000, -1000, -1000,
	-2, 3475, 12162, 999, 11728, 12162, -1000, 12162, -1000, 842,
	-1000, -1000, 106, -1000, 247, 822, 13030, -1000, 821, -1000,
	771, -1000, 732, 838, 6377, 7094, 113, -1000, -1000, 113,
	113, 7094, -1000, -1000, 12162, -5, 1174, 12162, 978, -9,
	-1000, 17211, -1000, -1000, 7094, 7094, 7094, 7094, 7094, 617,
	246, -1000, -1000, -1000, 3951, -1000, -1000, -148, 246, 253,
	-1000, -1000, 245, -148, -1000, -1000, -1000, -1000, 244, 1294,
	332, -1000, -1000, -1000, 7094, 290, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 997, 243, 239, -1000, -1000,
	-1000, -1000, 236, 234, 233, 232, 229, 228, 226, 225,
	224, 223, 219, 218, 207, 568, -1000, 341, -1000, -1000,
	341, 341, -1000, 190, 190, 193, -1000, -1000, -1000, 190,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 201,
	84, -1000, -1000, -1000, 12162, -148, -1000, 3237, 3475, 7094,
	-17, -1000, 17822, -1000, -67, 578, -1000, 11067, 1095, 1094,
	1098, 11511, 417, 415, 12162, 331, 66, 1164, 9912, -1000,
	12162, 12162, -1000, 12162, -1000, -1000, 12162, 12162, 12162, -4,
	10623, 412, -35, 12162, 12162, -1000, 975, 760, -10, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1264,
	-1000, -1000, -1000, -1000, 1282, -10, -1000, -1000, -1000, -1000,
	-1000, 1293, -1000, -1000, -1000, -1000, 3475, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 12162, -1000, -1000, -1000, -1000, -1000, 11511,
	10840, 1025, 707, 817, -1000, 1024, -1000, -1000, -1000, -1000,
	17822, -1000, 17822, 670, 912, -1000, 912, -13, -1000, 16959,
	-1000, 198, -22, -1000, 331, 9675, 6120, 18093, 12162, 422,
	7094, 7094, 7094, 7094, 7094, 7094, 7094, 7094, 7094, 7094,
	7094, 7094, 7094, 7094, 7094, 7094, 7094, 7094, 7094, 7094,
	7094, 881, 410, 972, 612, 189, 666, 3475, -1000, -1000,
	1232, 1232, 1232, 17868, 17868, 157, -1000, -146, 16638, -14,
	-148, -1000, -1000, 5146, 4907, -148, 2939, -1000, 668, 1281,
	336, 17822, 1005, 949, 197, 76, 75, 7094, 805, 7094,
	7333, 7094, 7094, 4190, 7094, 7094, 7094, 7094, 7094, 7094,
	-1000, 196, -1000, -1000, -1000, -1000, 1277, -1000, -1000, 1276,
	-1000, 1273, 331, 74, -1000, -1000, -1000, -1000, 2401, 5642,
	-1000, 716, 12162, 12162, 12162, -1000, -1000, 815, 12813, -1000,
	18093, 12162, -1000, 195, 194, 859, 857, 12162, 12162, 12596,
	12379, 12162, 788, 12162, 12162, 513, -1000, 7094, 706, -1000,
	9221, 351, 12162, 45, -1000, -1000, -1000, 278, 12162, -1000,
	-1000, -1000, 86, -1000, -34, -1000, -1000, 12162, -35, -36,
	12162, -1000, 542, 560, -1000, -1000, 8757, -1000, -1000, -1000,
	668, -1000, -73, -1000, -1000, 73, -40, -1000, -1000, -1000,
	-1000, 12162, 203, 12162, 12162, 1021, 12162, -1000, -1000, -1000,
	7094, -1000, -1000, -1000, -4, 12162, -1000, 941, -51, 1047,
	11294, 11294, -1000, 8984, -1000, -1000, 1176, -1000, -1000, -1000,
	-1000, 51, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 193, 568, 190, 190, 190, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 341, 341, 341, -1000, -1000,
	291, 452, 452, 1231, 1231, 1231, 449, 449, 491, 148,
	108, 108, 108, 962, 287, 287, 108, 108, 108, 17868,
	17841, 504, 7094, 408, 607, 189, 7094, -1000, 925, -1000,
	-1000, -1000, 973, 187, 7333, 7333, -1000, -1000, -1000, 3951,
	184, -1000, -1000, -1000, -1000, -1000, 181, 7094, -1000, 7094,
	-37, -38, -1000, 17822, -1000, -44, -1000, -1000, -45, 7094,
	7094, 7094, 69, -1000, 401, -1000, 396, 395, 393, -1000,
	178, 68, 486, -1000, 7094, 579, 175, 174, 7094, -1000,
	-1000, 17576, 67, 971, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 64, 17548, 60, 17794, -1000, 7333, 7333, 7333, 3951,
	172, 58, 16931, -109, 17529, 5881, 5881, 5881, 57, 17257,
	7094, -109, 15664, 15638, 2478, -46, -50, -52, 1266, -54,
	55, 53, 941, -1000, -1000, 7094, -1000, -1000, -1000, 392,
	389, 1019, -1000, 790, -1000, 599, 7094, 12162, 170, 169,
	611, -1000, 1016, 610, 1015, 610, -1000, -67, 575, -1000,
	-1000, 388, 17822, -1000, 1100, -56, -1000, -1000, 331, 9912,
	5642, -58, -1000, -73, -73, -1000, -1000, -1000, -1000, -1000,
	12162, -1000, 10840, 167, 12162, 165, 164, 12162, -1000, -1000,
	52, -1000, -1000, -1000, -1000, -1000, 934, 1144, 9675, 874,
	873, 9675, 1039, 613, 613, 613, -1000, -1000, -1000, 12162,
	154, -1000, 9458, 49, 1047, 257, 255, -1000, 1254, 7094,
	504, 7094, 7333, 7333, -1000, 504, -1000, -1000, -1000, -1000,
	969, 153, 7094, 18093, 16884, 2566, -60, -1000, 3951, 4668,
	-91, 16611, 7094, -1000, -1000, 253, -1000, 46, 5403, -1000,
	17230, -19, -19, -1000, 829, 799, 583, 459, 1246, 1292,
	1044, -1000, 7094, 17283, -1000, 10149, 333, 625, 16592, 18093,
	-1000, 7094, -1000, 967, 7094, -1000, 18093, 7333, 7333, 7333,
	7333, 7333, 7333, 7333, 7333, 7333, 7333, 7333, 7333, 7333,
	7333, 7333, 7333, 7333, 7333, 845, 7333, 1230, 1230, 1230,
	-99, 4429, -1000, 964, 967, 7094, 7094, 18093, 44, 43,
	38, -1000, 7094, -109, 7094, 7094, 7094, -1000, -1000, -1000,
	37, -1000, 1242, -1000, -1000, 934, 16664, 12162, 12162, 12162,
	1011, 1054, -1000, 16346, -62, 12162, 12162, -1000, 841, 870,
	373, 12162, -1000, 12162, -1000, 12162, 12162, 12162, 12162, 152,
	-4, -1000, -1000, -1000, 273, -1000, -1000, 12162, 151, 10840,
	7807, 694, -1000, 311, 7094, 7094, 1047, 9675, 9675, 807,
	867, 9675, -1000, -1000, -1000, -1000, 150, 12162, 11294, 414,
	1235, 33, 1224, 504, 2550, 221, 7094, 18093, 138, -66,
	-1000, 7094, 7094, -1000, 16320, -68, -1000, 7094, -1000, 17822,
	-1000, 1291, 7094, 32, 28, 27, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 25, -1000, -1000, 17822, 7094, -1000, -1000,
	15417, 7094, 24, -1000, 23, 17822, 964, 17822, -1000, 510,
	510, 1230, 1230, 1230, 587, 587, 541, 770, 576, 576,
	576, 1394, 427, 427, 576, 576, 576, 966, 836, 120,
	17894, 7094, -72, -1000, -1000, -1000, 17822, 17822, 22, -1000,
	-1000, -1000, -109, 2138, 16293, 16274, -1000, 19, 311, -1000,
	-1000, -1000, -1000, 12162, -1000, 12162, -1000, 12162, 787, -1000,
	-1000, 846, 118, 7333, 12162, -1000, 643, -76, -82, 780,
	-1000, 764, 7094, -1000, 18093, 610, 610, -1000, 386, 384,
	-1000, 1052, 7807, 1097, -1000, 117, -84, 12162, 18, -86,
	-1000, 62, 1109, 7094, -1000, -1000, 116, 12162, -1000, 12162,
	17822, -109, -1000, 807, -1000, 114, 7094, 9675, -1000, 12162,
	-90, -1000, -1000, 251, 222, -1000, 7094, 7094, 138, -92,
	-1000, 18093, 504, 504, -1000, -1000, 16028, -1000, 17230, -1000,
	-1000, -1000, -1000, 17822, 588, -1000, 16002, -1000, -1000, -1000,
	7333, 960, 112, 18093, 15975, -1000, -1000, 7094, -1000, -1000,
	-1000, -1000, -1000, 862, -1000, -1000, -1000, 7094, 17894, 63,
	-1000, 111, -1000, -1000, -1000, 538, -1000, -1000, 17822, 1110,
	-1000, -1000, 12162, 12162, 467, -94, 12162, -1000, -1000, 3712,
	643, -100, -1000, 643, 7807, 1107, -148, 12162, 1107, 15956,
	2939, 104, -107, -1000, 1158, -1000, 12162, 17822, -1000, -102,
	-1000, -1000, -1000, 504, 504, -1000, -1000, -1000, 14, 625,
	1120, -1000, 17177, 7333, 18093, -115, -1000, 15710, -1000, 15691,
	832, 12162, 12162, 12162, 356, 12162, -1000, -1000, 450, -1000,
	331, -1000, -1000, 643, -1000, -1000, -1000, -1000, -1000, 1109,
	-45, 7807, 12162, 93, -117, -1000, -1000, 553, 7094, 17177,
	-127, -1000, -1000, -1000, 647, 777, -132, -134, 63, -1000,
	7094, -1000, 9912, -1000, -1000, 1107, 13, -140, -1000, -1000,
	-1000, 8, 6855, 6855, -109, -1000, -1000, 660, 649, 508,
	-1000, -1000, -1000, -1000, -1000, 832, 17822, -123, -1000, -1000,
	643, -1000, -1000, -1000, 7570, 714, 464, 16912, -1000, -1000,
	1058, -1000, 364, 886, 886, 647, -1000, -1000, 1198, -1000,
	-1000, -1000, -1000, -1000, -1000, 1208, -1000, -1000, 848, -1000,
	-1000, 6616, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1495, 1494, 1180, 1490, 1489, 1487, 1486, 1484, 74,
	1480, 1478, 87, 1477, 71, 1475, 1474, 1473, 53, 1471,
	1465, 1463, 1462, 67, 35, 1861, 101, 95, 1461, 1459,
	1458, 10, 70, 73, 1457, 51, 1456, 588, 1237, 44,
	1455, 23, 27, 1139, 1453, 1452, 1451, 1450, 41, 1447,
	1445, 1444, 11, 42, 13, 1443, 15, 33, 1442, 1441,
	75, 1440, 72, 45, 90, 29, 1434, 1433, 516, 1431,
	12, 49, 1425, 22, 1424, 30, 55, 99, 1421, 536,
	47, 21, 43, 1420, 1419, 1418, 78, 60, 46, 1417,
	40, 39, 1415, 52, 1412, 92, 96, 1411, 1410, 1409,
	1406, 1402, 1399, 1171, 1395, 8, 32, 48, 5, 31,
	0, 973, 524, 1393, 56, 37, 38, 25, 1391, 76,
	1388, 1385, 1382, 1377, 1376, 57, 1371, 1369, 50, 103,
	26, 63, 68, 16, 28, 64, 77, 120, 81, 1367,
	85, 1365, 24, 1364, 1362, 909, 62, 1361, 1360, 1359,
	819, 686, 685, 482, 1358, 1357, 676, 560, 1356, 1354,
	59, 1352, 1351, 106, 1350, 105, 89, 1348, 84, 1347,
	69, 1345, 558, 104, 94, 1344, 86, 54, 1343, 1342,
	1341, 20, 1, 6, 3, 9, 4, 18, 17, 1340,
	1339, 88, 65, 1338, 535, 1335, 1332, 34, 1330, 1328,
	19, 1325, 14, 1321, 7, 2, 1313, 98, 1309, 80,
	1308, 1169, 1306, 107, 1305, 1304, 1232, 58,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 33, 33, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 29,
	29, 35, 35, 35, 34, 34, 30, 30, 5, 5,
	5, 9, 10, 10, 10, 10, 10, 10, 64, 64,
	63, 63, 67, 67, 11, 11, 12, 12, 12, 12,
	141, 141, 140, 13, 17, 207, 207, 207, 211, 211,
	212, 212, 213, 213, 213, 213, 213, 213, 213, 209,
	209, 19, 19, 19, 103, 103, 102, 102, 102, 102,
	104, 104, 104, 104, 165, 163, 163, 170, 170, 170,
	46, 46, 46, 46, 46, 162, 162, 162, 162, 171,
	171, 171, 171, 171, 171, 47, 47, 47, 169, 169,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	164, 164, 208, 208, 210, 210, 8, 8, 48, 48,
	49, 49, 107, 107, 107, 106, 179, 179, 180, 180,
	180, 181, 181, 181, 181, 181, 181, 181, 178, 178,
	176, 176, 177, 177, 177, 177, 214, 214, 105, 105,
	52, 52, 184, 184, 184, 184, 182, 182, 182, 182,
	182, 185, 183, 186, 186, 186, 186, 186, 129, 129,
	129, 22, 7, 7, 92, 92, 56, 56, 133, 133,
	133, 42, 42, 31, 31, 31, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 93, 93, 94, 94, 21,
	21, 21, 216, 216, 36, 36, 37, 6, 6, 14,
	44, 44, 99, 99, 99, 101, 101, 101, 100, 100,
	100, 23, 70, 70, 71, 71, 139, 72, 72, 18,
	18, 25, 25, 24, 24, 24, 24, 24, 24, 26,
	26, 27, 27, 27, 27, 27, 27, 27, 192, 192,
	192, 194, 194, 191, 15, 15, 15, 15, 193, 193,
	215, 215, 79, 79, 79, 51, 50, 50, 54, 54,
	53, 55, 55, 132, 77, 77, 77, 77, 95, 96,
	96, 97, 97, 98, 98, 76, 76, 115, 115, 28,
	28, 60, 60, 61, 61, 134, 134, 134, 134, 135,
	135, 135, 135, 135, 135, 130, 130, 130, 130, 131,
	131, 82, 82, 82, 82, 80, 80, 81, 81, 136,
	136, 136, 136, 78, 78, 137, 137, 137, 108, 108,
	142, 142, 142, 59, 59, 59, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 144, 144, 144, 144,
	146, 146, 146, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 147, 147, 154, 154,
	155, 155, 156, 157, 148, 148, 149, 149, 150, 151,
	158, 158, 158, 160, 160, 152, 152, 153, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 88, 88, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 187, 187,
	187, 187, 187, 187, 187, 189, 189, 190, 190, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 195, 195, 196, 196, 197, 197,
	198, 198, 200, 201, 201, 201, 202, 206, 206, 199,
	199, 203, 203, 203, 204, 204, 205, 205, 205, 205,
	205, 119, 119, 119, 120, 120, 121, 127, 127, 127,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 40, 40, 40, 65,
	65, 117, 117, 116, 116, 116, 118, 118, 66, 159,
	159, 159, 159, 159, 159, 159, 83, 83, 89, 84,
	84, 85, 85, 85, 85, 85, 85, 90, 91, 86,
	86, 86, 114, 114, 122, 126, 126, 125, 124, 124,
	123, 123, 109, 109, 109, 109, 109, 73, 73, 217,
	217, 128, 128, 74, 74, 75, 69, 69, 68, 68,
	138, 138, 138, 138, 62, 62, 43, 43, 57, 57,
	58, 58, 41, 41, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 161, 161, 161, 38, 38,
	38, 39, 39, 167, 167, 167, 168, 168, 168, 168,
	166, 166, 166, 166, 166, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	4, 6, 1, 3, 2, 5, 3, 6, 4, 6,
	6, 6, 4, 8, 2, 3, 3, 6, 4, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 1, 1,
	1, 5, 3, 5, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 3, 1, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 3, 2, 1, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 4, 2, 4, 4, 3, 3, 4, 2,
	2, 0, 2, 0, 2, 0, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 3, 2, 0, 3, 1,
	2, 2, 1, 1, 2, 4, 2, 5, 6, 7,
	3, 1, 4, 5, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 10, 13, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 8, 10, 8, 10, 1, 0, 2, 0, 3,
	2, 2, 1, 0, 1, 0, 3, 3, 6, 6,
	1, 3, 1, 4, 2, 8, 5, 0, 4, 3,
	0, 7, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 1,
	1, 8, 8, 1, 2, 4, 4, 4, 2, 2,
	3, 1, 3, 6, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 2, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 3, 0, 2, 0, 2,
	3, 2, 0, 1, 3, 2, 2, 1, 4, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 3, 4, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 4, 5, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 6, 2, 1,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 1, 1, 3,
	1, 1, 1, 2, 2, 2, 1, 1, 3, 5,
	6, 8, 6, 6, 4, 4, 1, 1, 1, 5,
	1, 3, 1, 3, 1, 1, 1, 1, 6, 4,
	4, 4, 4, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 4, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 3, 5, 4, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 2, 2, 2, 3, 5, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 0, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	3, 5, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -16, -17, -18, -19, -20, -21, -22, -23, 19,
	-6, -7, -8, -193, 81, 87, 99, 178, -24, -25,
	191, 192, 29, 50, 180, 216, 56, -192, -27, -26,
	260, 236, 242, 187, -28, 204, 229, 263, 204, 68,
	109, 76, 112, 223, 68, 109, 204, -12, 260, -18,
	-14, -23, -9, -211, 18, -212, -213, 56, 81, 99,
	187, 112, 76, 223, -211, -103, 130, 189, 212, -104,
	-102, -165, 208, 138, -63, -38, 4, -172, -174, 16,
	17, 19, 28, 29, 33, 37, 39, 49, 50, 51,
	53, 55, 58, 59, 66, 67, 68, 69, 71, 76,
	80, 81, 87, 91, 92, 94, 100, 105, 112, 120,
	122, 127, 134, 135, 136, 137, 140, 141, 143, 146,
	148, 149, 155, 158, 161, 162, 165, 168, 169, 171,
	172, 174, 175, 176, 178, 180, 181, 183, 185, 186,
	188, 191, 192, 194, 196, 198, 201, 199, 205, 206,
	216, 217, 218, 219, 222, 223, 226, 227, 228, 232,
	237, 238, 239, 240, 30, 31, 32, 34, 35, 38,
	42, 43, 45, 70, 72, 73, 86, 88, 93, 101,
	103, 106, 107, 113, 114, 115, 117, 125, 145, 147,
	156, 160, 164, 166, 170, 182, 195, 200, 202, 209,
	213, 214, 229, 230, 4, 68, 49, 69, 100, 109,
	205, 208, 212, 18, -216, 212, -216, -216, -215, 204,
	204, -92, 68, 221, -26, -27, -25, -53, -54, 220,
	116, 85, 154, -24, -25, -192, -194, 171, -191, -38,
	130, 138, 189, 212, 208, -194, -50, -51, 18, 78,
	264, -136, -43, 152, -38, -75, 260, -3, -136, 106,
	-38, -43, 106, 97, 118, -137, -136, -38, 106, -62,
	106, -43, -64, 106, -63, -141, -140, -168, 4, -172,
	-174, -173, 229, 47, 57, 98, 111, 119, 121, 126,
	128, 139, 157, 159, 179, 193, 151, 264, 151, -103,
	-103, -37, 120, 210, 245, 97, 240, -47, 6, 74,
	-67, 262, 97, -208, 151, 97, -164, 97, 240, 120,
	-36, -37, -78, -136, -63, 106, 109, -38, 106, -53,
	-54, -77, -95, -96, 129, 150, -79, 18, 78, -79,
	-79, 37, 261, 261, 264, -194, -58, 260, -69, -68,
	-138, -110, 253, -112, 251, 252, 257, 142, 241, -119,
	221, -43, -113, 9, 260, -122, -189, -25, 86, 24,
	-120, -121, 182, -38, 8, 5, 6, 7, -41, -144,
	-153, 215, 89, 144, 40, -187, -188, 4, -172, -167,
	-145, -155, -149, -152, 117, 47, 61, 64, 62, 65,
	190, 224, 41, 88, 160, 164, 202, 213, 214, 106,
	145, 107, 45, 101, 125, 80, 31, 32, 34, 35,
	42, 43, 70, 72, 73, 93, 113, 114, 115, 147,
	170, 195, 209, 230, -173, -156, -157, -150, -151, -158,
	-68, -75, 253, -43, 260, -73, -109, 262, 265, 258,
	-74, -128, -110, 74, -33, 174, -32, 17, 19, 81,
	227, 86, 174, 174, 86, -137, -44, -43, 191, -38,
	25, 86, -35, 264, 39, 176, 86, 264, 86, 261,
	264, -207, -62, 204, 68, -213, -207, 127, -163, 74,
	-170, -162, -129, 9, 215, 89, 151, -169, 5, 252,
	-161, -168, 6, 8, 251, -163, 74, 59, -171, 6,
	4, -153, -129, 74, 130, 117, 262, -166, 4, -172,
	-174, -173, -175, 18, 20, 21, 22, 23, 24, 25,
	26, 27, 36, 40, 41, 44, 46, 48, 54, 56,
	60, 61, 62, 63, 64, 65, 74, 75, 77, 78,
	79, 82, 83, 85, 89, 90, 95, 96, 97, 99,
	102, 104, 108, 109, 110, 116, 118, 123, 124, 129,
	131, 132, 142, 144, 150, 151, 152, 153, 154, 163,
	167, 173, 177, 187, 190, 197, 203, 204, 207, 210,
	211, 215, 220, 221, 224, 225, 231, 233, 234, 235,
	236, -165, -210, 95, -207, -165, -165, 127, -35, 264,
	260, 142, -39, 106, -38, 142, -77, -96, -95, -97,
	-110, 18, -110, -112, -26, -26, -26, -55, -132, -110,
	-191, 25, -57, -38, -60, 97, 264, 10, 46, 28,
	251, 252, 253, 254, 255, 248, 249, 250, 247, 243,
	244, 245, 52, 133, 184, 12, 13, 14, 22, 153,
	128, 241, 193, 119, 30, 108, -40, 25, 4, -45,
	-110, -110, -110, -110, -110, 159, -25, -25, -110, -65,
	-73, -25, -116, 258, 260, -73, 260, 6, 6, 260,
	-123, -110, -195, 237, 95, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	166, -160, 232, -160, -160, -146, 260, -146, -147, 260,
	-146, 260, -60, -43, -109, -166, 253, -166, -110, 264,
	261, 264, 210, -93, 54, 48, -106, 106, 48, -176,
	-38, 54, -177, 44, 221, 167, 96, -93, 54, -93,
	54, 54, -136, 210, 210, -43, -108, 234, -99, -18,
	260, 74, 25, -70, -71, -139, -72, -43, 260, -38,
	-38, -43, -62, -63, -64, -12, -140, 210, -62, -57,
	97, -46, 169, 175, 196, 188, 264, 5, 8, 8,
	6, -166, -209, -38, -136, -48, -49, -107, -106, -178,
	-176, 109, 221, 86, 151, 142, 86, -98, 182, 183,
	264, -31, 26, 77, 260, 264, 261, -108, -61, -134,
	-136, -25, -135, 260, -138, -142, -143, -145, -154, -148,
	-152, -153, 33, 38, 206, 200, 113, 114, 115, 195,
	31, 170, 93, 80, 73, 72, 147, 35, 34, -156,
	-157, -150, -151, 70, 209, 32, 43, 42, 230, -63,
	208, -110, -110, -110, -110, -110, -110, -110, -110, -110,
	-110, -110, -110, -110, -110, -110, -110, -110, -110, -110,
	-110, -110, 128, 193, 30, 108, 210, 144, 142, 215,
	89, 222, 78, 148, -217, 203, 27, -114, -25, 260,
	-127, 23, 197, 18, -166, -119, 182, 260, 261, 264,
	-65, -118, 259, -110, -116, -65, 261, 261, -65, 231,
	18, 78, 253, -87, 239, 136, 71, 105, 135, -88,
	186, 8, -126, -125, 233, -196, 91, 102, 260, 261,
	261, -110, -66, -159, 4, 239, 136, 71, 105, 135,
	186, -83, -110, -84, -111, -112, 251, 252, 257, 260,
	182, -85, -110, -65, -110, 36, 124, 211, -86, -110,
	97, -65, -110, -110, -110, -65, -65, -65, 260, 8,
	8, 8, -108, 261, 259, 266, -128, -32, -43, -38,
	-38, 142, -106, 106, -142, -38, 260, 260, 122, 122,
	-38, -38, 106, -38, 106, -38, -38, -33, 174, -38,
	-38, 174, -110, -101, 151, -62, 229, -38, -60, 264,
	245, -62, -35, -209, -209, 219, 51, 169, -170, -87,
	264, 261, 264, -39, 109, -63, -43, 86, -38, -132,
	-15, -18, -14, -23, -9, -38, -76, 102, 264, 57,
	-82, 121, 139, 98, 126, 179, 111, -131, -130, 25,
	-38, -131, -25, -135, -134, -59, 24, -87, 260, 240,
	-110, 210, -217, 203, -114, -110, 144, 215, 89, 222,
	78, 148, 97, 260, -111, -111, -65, -25, 260, 260,
	-65, -110, 264, 259, 259, 264, 261, -54, 264, -53,
	-110, -65, -65, 261, 210, 210, 210, 210, 260, 261,
	-124, -125, 82, -110, -201, 158, 260, 260, -110, 25,
	261, 97, 261, -89, 163, 261, 10, 251, 252, 253,
	254, 255, 248, 249, 250, 247, 243, 244, 245, 52,
	133, 184, 12, 13, 14, 119, 108, -111, -111, -111,
	-65, 260, 261, -90, -91, 97, 95, 25, -86, -86,
	-86, 261, 97, -65, 264, 264, 264, 261, 261, 261,
	8, 261, 264, 261, 261, -76, -110, 210, 210, 86,
	142, -179, -177, -110, -57, 260, 260, -29, 81, 191,
	-94, 86, -35, 86, -35, 210, -93, 54, 210, 53,
	261, -108, -71, -128, 261, -38, -107, 260, -39, 260,
	260, -38, 261, -115, 104, 37, -134, 121, 121, -134,
	-82, 121, -80, 157, -80, -80, -38, 260, 261, 258,
	258, 8, -110, -110, -111, -111, 97, 260, -110, -117,
	-142, 22, 22, 261, -110, -65, 261, 264, 261, -110,
	-116, 261, 231, -54, -54, -54, 136, 105, 135, -88,
	135, -88, -88, 8, 6, 83, -110, 207, -202, -38,
	260, 234, -53, 261, -142, -110, -90, -110, -142, -111,
	-111, -111, -111, -111, -111, -111, -111, -111, -111, -111,
	-111, -111, -111, -111, -111, -111, -111, 78, 142, 148,
	-111, 264, -65, 261, -91, -90, -110, -110, -142, 261,
	261, 261, -65, -110, -110, -110, 261, 8, -115, 259,
	-38, -38, -106, 86, -180, 54, -181, 46, 142, 144,
	221, 167, 44, 74, 173, 261, 261, -57, -57, 142,
	74, 142, 74, 67, 217, -38, -38, -43, -38, -38,
	-38, -100, 260, 151, -18, 245, -57, 260, -48, -56,
	-133, -38, -190, 260, -187, -188, -41, 151, -197, 235,
	-110, -65, -134, -134, -81, 225, 151, 121, -134, 260,
	-57, -130, 259, 8, 8, 261, 22, 22, -110, -117,
	261, 264, -110, -110, 261, 261, -110, 6, -110, 261,
	261, 261, 261, -110, -206, -38, -110, 261, 261, -91,
	97, 78, 148, 260, -110, 261, 261, 264, 261, 261,
	261, -197, -106, -38, -63, 144, 122, 260, -111, -43,
	-105, -214, 55, 201, 261, 261, 144, 144, -110, -142,
	-35, -35, 210, 210, 79, -56, 54, -75, -25, 260,
	261, -57, 261, 261, 264, -42, -73, 46, -42, -110,
	260, -43, -198, -200, -38, -81, 260, -110, -134, -57,
	261, 259, 259, -110, -110, 261, -142, 261, -54, -199,
	162, 261, -111, 97, 260, -117, 261, -110, -181, -110,
	-52, 260, 260, 173, -34, 46, -38, -38, 223, 143,
	261, -38, -105, 261, -105, -133, -31, -63, -31, 261,
	-65, 260, 264, 25, -57, 261, 261, -54, 37, -111,
	-117, 261, 261, 261, -184, 134, -57, -57, -43, -30,
	225, -63, 191, -108, -105, -42, -54, -56, -200, -202,
	261, -203, 168, 183, -65, 261, -182, -185, -183, 151,
	98, 161, 194, 261, 261, -52, -110, -70, -31, 261,
	261, 261, -204, -205, 30, 218, 59, -110, -204, -183,
	151, -185, 151, 223, 76, -184, -108, -105, -205, 165,
	94, 182, 165, 94, -186, 141, 176, 39, 191, -186,
	-182, 22, 16, 144, 74, -205,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	48, 49, 50, 0, 0, 289, 0, 0, 259, -2,
	0, 0, 233, 233, 233, 291, 205, 288, -2, 299,
	0, 0, 0, 297, 273, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 66,
	67, 68, 69, 0, 78, 79, 80, 82, 83, 84,
	85, 86, 87, 88, 0, 91, 758, 789, 799, 95,
	100, 0, 849, -2, 104, 60, 708, 709, 710, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 759, 760, 761, 762, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 850,
	851, 852, 853, 854, 130, 131, 0, 133, 143, 0,
	141, 0, 0, 139, 235, 232, 230, 231, 0, 290,
	0, 0, 0, 204, -2, 269, 270, -2, 0, 294,
	294, 294, 0, 0, 270, 0, 278, 777, 281, 691,
	758, 763, 789, 799, 849, 279, 677, 0, 296, 295,
	0, 274, 349, 0, 686, 319, 0, 2, 0, 831,
	0, 0, 831, 0, 0, 0, 355, 52, 831, 43,
	831, 684, 56, 831, 58, 0, 70, 72, 716, 717,
	718, 719, 853, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 0, 0, 0, 92,
	93, 94, 0, 0, 0, 0, 0, 103, 125, 126,
	61, 0, 0, 145, 0, 0, 136, 0, 137, 0,
	229, 234, 43, 353, 0, 831, 712, 237, 831, -2,
	0, 265, 306, 307, 0, 0, 0, 292, 293, 0,
	0, 0, 261, 262, 0, 280, 0, 0, 322, 676,
	678, 682, 683, 434, 0, 0, 0, 0, 0, 0,
	0, 516, 517, 518, 0, 520, 521, 522, 826, 0,
	526, 527, 845, 686, 694, 695, 696, 697, 0, 0,
	0, 702, 703, 704, 661, 565, 536, -2, -2, 692,
	376, 377, 378, 379, -2, 855, 540, 542, 544, 545,
	546, 547, 0, 827, 841, 842, 848, 851, 852, 831,
	838, 832, 822, 829, 837, 746, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 715, 400, 401, 406, 407, 409,
	322, 320, 350, 351, 0, 687, 667, 0, 0, 0,
	0, 673, 671, 672, 20, 226, 22, 0, 226, 226,
	0, 0, 0, 0, 0, 359, 0, 240, 0, 356,
	0, 0, 54, 0, 41, 42, 0, 0, 0, 289,
	0, 0, 75, 0, 742, 81, 0, 0, 96, 98,
	105, 107, 108, 109, 115, 116, 117, 118, 198, 0,
	200, 128, 129, 705, 0, 97, 99, 101, 102, 119,
	120, 0, 122, 123, 124, 417, 0, 62, 720, 721,
	722, 723, 724, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 132, 134, 0, 142, 135, 140, 138, 201, 0,
	149, 0, 0, 831, 711, 0, 268, 304, 305, 308,
	311, 312, 309, 434, 275, 276, 277, 300, 301, 215,
	282, 0, 0, 688, 359, 0, 0, 0, 0, 0,
	600, 601, 602, 603, 604, 607, 608, 605, 606, 609,
	610, 611, 612, 0, 0, 613, 614, 615, 0, 0,
	617, 0, 0, 0, 670, 0, 0, 0, 681, 616,
	438, 439, 440, 461, 462, 0, 488, -2, 619, 0,
	523, 524, 525, 0, 0, -2, 0, 699, 431, 0,
	0, 660, 567, 0, 0, 0, 0, 0, 0, 0,
	640, 646, 0, 0, 0, 0, 0, 0, 0, 0,
	390, 403, 413, 411, 410, 392, 0, 391, 389, 0,
	393, 0, 359, 0, 668, 662, 663, 664, 0, 0,
	675, 0, 0, 0, 0, 225, 24, 831, 0, 34,
	0, 0, 171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 247, 242,
	0, 0, 0, 322, 252, 254, 255, 0, 0, 357,
	53, 685, 43, 59, 57, 65, 71, 0, 76, 77,
	0, 236, 0, 0, 113, 114, 0, 199, 707, 706,
	431, 63, 144, 89, 354, 0, 148, 150, 152, 153,
	154, 712, 0, 0, 0, 0, 0, 310, 313, 314,
	0, 303, 213, 214, 289, 0, 690, 316, 321, 323,
	340, 340, 327, 0, 679, 435, 365, 366, 367, 368,
	369, 431, 372, 373, 374, 375, 383, 384, 385, 386,
	387, 388, 397, 0, 382, 382, 382, 394, 395, 398,
	399, 404, 405, 415, 416, 414, 414, 414, 412, 436,
	0, 441, 442, 443, 444, 445, 446, 447, 448, 449,
	-2, -2, -2, 453, 454, 455, -2, -2, -2, 459,
	460, -2, 618, 0, 670, 0, 0, 467, 0, 470,
	472, 474, 0, 0, 0, 0, 669, 484, 652, 0,
	0, 597, 598, 599, 680, 469, 0, 0, 519, 0,
	0, 0, 625, 619, 626, 0, -2, 528, 299, 0,
	0, 0, 0, 700, 418, 419, 420, 421, 422, 423,
	432, 0, 659, 655, 0, 575, 0, 0, 0, 541,
	543, 0, 0, 0, 629, 630, 631, 632, 633, 634,
	635, 0, 0, 0, 0, 489, 0, 0, 0, 0,
	845, 0, 619, 645, 0, 0, 0, 0, 0, 619,
	0, 651, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 352, 665, 0, 674, 23, 217, 0,
	0, 0, 26, 831, 157, 0, 0, 0, 0, 0,
	228, 35, 831, 43, 831, 43, 36, 21, 226, 216,
	219, 0, 358, 239, 0, 0, 244, 241, 359, 0,
	0, 0, 55, 73, 74, 110, 111, 112, 106, 121,
	0, 146, 0, 0, 712, 0, 0, 0, 238, 302,
	0, 284, 285, 286, 287, 689, 318, 0, 0, 0,
	0, 0, 0, 346, 346, 346, 344, 325, 339, 0,
	338, 326, -2, 327, 0, 360, 362, 370, 0, 0,
	-2, 0, 0, 0, 485, -2, 468, 471, 473, 475,
	0, 0, 0, 0, 0, 0, 0, 486, 0, 0,
	0, 620, 0, 623, 624, 0, -2, 0, 0, 298,
	299, 299, 299, 534, 0, 0, 0, 0, 0, 0,
	0, 656, 0, 0, 535, 0, 0, 0, 0, 0,
	549, 0, 550, 0, 0, 551, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 491, 492, 493,
	0, 0, 552, 643, 644, 0, 0, 0, 0, 0,
	0, 557, 0, 650, 0, 0, 0, 561, 562, 563,
	0, 380, 0, 396, 408, 318, 0, 0, 0, 0,
	0, 155, 170, 0, 0, 0, 0, 28, 0, 0,
	0, 0, 32, 0, 38, 0, 0, 0, 0, 250,
	0, 251, 253, 256, 0, 90, 151, 0, 0, 149,
	0, 0, 283, 569, 0, 0, 324, 0, 0, 0,
	0, 0, 341, 345, 342, 343, 336, 0, 329, 0,
	0, 0, 437, -2, 0, 0, 0, 0, -2, 0,
	621, 0, 0, 653, 0, 0, 592, 0, -2, 620,
	627, 529, 0, 0, 0, 0, 424, 425, 426, 427,
	428, 429, 430, 0, 701, 654, 658, 0, 573, 574,
	578, 0, 0, 539, 0, 628, 637, 638, 490, 494,
	495, 496, 497, 498, 499, 500, 501, 502, -2, -2,
	-2, 506, 507, 508, -2, -2, -2, 0, 0, 0,
	639, 0, 0, 595, 641, 642, 647, 648, 0, 554,
	555, 556, 649, 0, 0, 0, 402, 0, 569, 666,
	221, 223, 25, 0, 156, 0, 159, 0, 0, 162,
	163, 0, 0, 0, 0, 172, 179, 0, 0, 0,
	40, 0, 0, 227, 0, 43, 43, 218, 0, 0,
	220, 0, 0, 0, 243, 0, 0, 0, 0, 0,
	206, 212, 212, 0, 537, 538, 0, 0, 271, 0,
	317, 315, 330, 0, 332, 0, 0, 0, 334, 0,
	0, 328, 363, 0, 0, 371, 0, 0, -2, 0,
	478, 0, -2, -2, 487, 591, 620, 698, 299, 530,
	532, 533, 433, 657, 580, 577, 0, 564, 548, 636,
	0, 0, 0, 0, 620, 594, 553, 0, 559, 560,
	381, 272, 27, 0, 160, 161, 164, 0, 166, 181,
	173, 0, 176, 177, 174, 0, 29, 30, 39, 45,
	31, 37, 0, 0, 0, 0, 0, 257, 258, 0,
	179, 0, 147, 179, 0, 215, 693, 0, 215, 0,
	0, 0, 568, 570, 0, 331, 0, 348, 333, 0,
	337, 364, 361, -2, -2, 479, 622, 593, 0, 299,
	0, 566, -2, 0, 0, 0, 596, 0, 158, 0,
	185, 0, 0, 0, 47, 0, 222, 224, 0, 246,
	359, 249, 168, 179, 202, 207, 208, 211, 209, 212,
	299, 0, 0, 0, 0, 335, 531, 583, 0, -2,
	0, 514, 558, 165, 190, 0, 0, 0, 181, 33,
	0, 44, 0, 248, 169, 215, 0, 0, 571, 572,
	347, 0, 0, 0, 579, 515, 167, 186, 187, 0,
	182, 183, 184, 180, 178, 185, 46, 359, 210, 529,
	179, 576, 581, 584, -2, 802, 739, 0, 582, 188,
	0, 189, 0, 0, 0, 190, 245, 203, 0, 586,
	587, 588, 589, 590, 191, 0, 194, 195, 0, 192,
	175, 0, 193, 196, 197, 585,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 249, 3, 255, 250, 3,
	260, 261, 253, 251, 264, 252, 262, 254, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 266, 263,
	243, 245, 244, 3, 265, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 258, 3, 259, 248, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 247, 3, 257,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 246, 256,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lookahead func() int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.lookahead()
}

func sqlNewParser() sqlParser {
	p := &sqlParserImpl{
		lookahead: func() int { return -1 },
	}
	return p
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqllval sqlSymType
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := make([]sqlSymType, sqlMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlchar := -1
	sqltoken := -1 // sqlchar translated into internal numbering
	sqlrcvr.lookahead = func() int { return sqlchar }
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlchar = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlchar < 0 {
		sqlchar, sqltoken = sqllex1(sqllex, &sqllval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlchar = -1
		sqltoken = -1
		sqlVAL = sqllval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlchar < 0 {
			sqlchar, sqltoken = sqllex1(sqllex, &sqllval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlchar = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:439
		{
			sqllex.(*scanner).stmts = sqlDollar[1].stmts
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:445
		{
			if sqlDollar[3].stmt != nil {
				sqlVAL.stmts = append(sqlDollar[1].stmts, sqlDollar[3].stmt)
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:451
		{
			if sqlDollar[1].stmt != nil {
				sqlVAL.stmts = []Statement{sqlDollar[1].stmt}
			} else {
				sqlVAL.stmts = nil
			}
		}
	case 13:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:470
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 19:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:479
		{
			sqlVAL.stmt = nil
		}
	case 20:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:485
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[3].qname, IfExists: false, Cmds: sqlDollar[4].alterTableCmds}
		}
	case 21:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:489
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[5].qname, IfExists: true, Cmds: sqlDollar[6].alterTableCmds}
		}
	case 22:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:495
		{
			sqlVAL.alterTableCmds = AlterTableCmds{sqlDollar[1].alterTableCmd}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:499
		{
			sqlVAL.alterTableCmds = append(sqlDollar[1].alterTableCmds, sqlDollar[3].alterTableCmd)
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:506
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].colDef}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:511
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].colDef}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:516
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].colDef}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:521
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].colDef}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:525
		{
			unimplemented()
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:527
		{
			unimplemented()
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:529
		{
			unimplemented()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:532
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: true, Column: sqlDollar[5].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:537
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: false, Column: sqlDollar[3].str}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:542
		{
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:545
		{
			sqlVAL.alterTableCmd = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].constraintDef}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:549
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:551
		{
			unimplemented()
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:554
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: true, Constraint: sqlDollar[5].str}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:559
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: false, Constraint: sqlDollar[3].str}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:564
		{
			unimplemented()
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:565
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:568
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:569
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:570
		{
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:573
		{
			unimplemented()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:574
		{
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:577
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:578
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:589
		{
			sqlVAL.stmt = &Delete{Table: sqlDollar[4].tblExpr, Where: newWhere(astWhere, sqlDollar[5].expr)}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:596
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:600
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:604
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:608
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:612
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:616
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:622
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:626
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:632
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:636
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:642
		{
			sqlVAL.indirect = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:646
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, NameIndirection(sqlDollar[3].str))
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:653
		{
			sqlVAL.stmt = &Explain{Statement: sqlDollar[2].stmt}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:657
		{
			sqlVAL.stmt = &Explain{Options: sqlDollar[3].strs, Statement: sqlDollar[5].stmt}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:663
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:672
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:676
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:686
		{
			sqlVAL.stmt = &Grant{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:693
		{
			sqlVAL.stmt = &Revoke{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:700
		{
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[1].qnames)}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:704
		{
			// TODO(marc): this is postgres' grammar, but do we really need
			// both "x" and "TABLE X"?
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[2].qnames)}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:710
		{
			sqlVAL.targetList = TargetList{Databases: NameList(sqlDollar[2].strs)}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:717
		{
			sqlVAL.privilegeList = privilege.List{privilege.ALL}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:720
		{
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:724
		{
			sqlVAL.privilegeList = privilege.List{sqlDollar[1].privilegeType}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:728
		{
			sqlVAL.privilegeList = append(sqlDollar[1].privilegeList, sqlDollar[3].privilegeType)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:735
		{
			sqlVAL.privilegeType = privilege.CREATE
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:739
		{
			sqlVAL.privilegeType = privilege.DROP
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:743
		{
			sqlVAL.privilegeType = privilege.GRANT
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:747
		{
			sqlVAL.privilegeType = privilege.SELECT
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:751
		{
			sqlVAL.privilegeType = privilege.INSERT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.privilegeType = privilege.DELETE
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:759
		{
			sqlVAL.privilegeType = privilege.UPDATE
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:771
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.stmt = sqlDollar[2].stmt
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:783
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:793
		{
			sqlVAL.stmt = &SetTransaction{Isolation: sqlDollar[2].isoLevel}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:800
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:804
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:808
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:819
		{
			unimplemented()
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.stmt = &SetTimeZone{Value: sqlDollar[3].expr}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:825
		{
			unimplemented()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:832
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.expr = ValArg(sqlDollar[1].str)
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:850
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:855
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:860
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.isoLevel = SerializableIsolation
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:875
		{
			sqlVAL.expr = DBool(true)
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.expr = DBool(false)
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:906
		{
			// TODO(pmattis): support opt_interval?
			expr := &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
			// Use an empty EvalContext.
			var ctx EvalContext
			d, err := ctx.EvalExpr(expr)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type")
				return 1
			}
			if _, ok := d.(DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.expr = d
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:932
		{
			unimplemented()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:933
		{
			unimplemented()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:934
		{
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.stmt = &ShowColumns{Table: sqlDollar[4].qname}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.stmt = &ShowDatabases{}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.stmt = &ShowGrants{Targets: sqlDollar[3].targetListPtr, Grantees: sqlDollar[4].strs}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.stmt = &ShowIndex{Table: sqlDollar[4].qname}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.stmt = &ShowTables{Name: sqlDollar[3].qname}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.stmt = nil
		}
	case 138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.stmt = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.stmt = nil
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:990
		{
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.qname = nil
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1000
		{
			tmp := sqlDollar[2].targetList
			sqlVAL.targetListPtr = &tmp
		}
	case 143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.targetListPtr = nil
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.strs = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[3].qname, IfNotExists: false, Defs: sqlDollar[5].tblDefs}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[6].qname, IfNotExists: true, Defs: sqlDollar[8].tblDefs}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.tblDefs = nil
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.tblDefs = TableDefs{sqlDollar[1].tblDef}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.tblDefs = append(sqlDollar[1].tblDefs, sqlDollar[3].tblDef)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.tblDef = sqlDollar[1].colDef
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.tblDef = sqlDollar[1].constraintDef
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.colDef = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].colType, sqlDollar[3].colQuals)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.colQuals = append(sqlDollar[1].colQuals, sqlDollar[2].colQual)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.colQuals = nil
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1076
		{
			// TODO(pmattis): Handle constraint name.
			sqlVAL.colQual = sqlDollar[3].colQual
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1081
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.colQual = NotNullConstraint{}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.colQual = NullConstraint{}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.colQual = UniqueConstraint{}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.colQual = PrimaryKeyConstraint{}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1112
		{
			unimplemented()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1114
		{
			if ContainsVars(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.colQual = &ColumnDefault{Expr: sqlDollar[2].expr}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1125
		{
			unimplemented()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.tblDef = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: NameList(sqlDollar[4].strs),
				Storing: sqlDollar[6].strs,
			}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.tblDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: NameList(sqlDollar[5].strs),
					Storing: sqlDollar[7].strs,
				},
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.constraintDef = sqlDollar[3].constraintDef
			sqlVAL.constraintDef.setName(Name(sqlDollar[2].str))
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.constraintDef = sqlDollar[1].constraintDef
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1162
		{
			unimplemented()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameList(sqlDollar[3].strs),
					Storing: sqlDollar[5].strs,
				},
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameList(sqlDollar[4].strs),
				},
				PrimaryKey: true,
			}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1182
		{
			unimplemented()
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.strs = sqlDollar[3].strs
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.strs = nil
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.strs = nil
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1218
		{
			unimplemented()
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1219
		{
			unimplemented()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1220
		{
			unimplemented()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1221
		{
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1228
		{
			unimplemented()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1229
		{
			unimplemented()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1230
		{
			unimplemented()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1231
		{
			unimplemented()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1232
		{
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1235
		{
			unimplemented()
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1241
		{
			unimplemented()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1242
		{
			unimplemented()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1243
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1244
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1245
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.expr = NumVal("-" + sqlDollar[2].str)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.expr = DInt(sqlDollar[1].ival)
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.stmt = &Truncate{Tables: sqlDollar[3].qnames}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.stmt = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].qname,
				Unique:  sqlDollar[2].boolVal,
				Columns: sqlDollar[8].strs,
				Storing: sqlDollar[10].strs,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.stmt = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].qname,
				Unique:      sqlDollar[2].boolVal,
				IfNotExists: true,
				Columns:     sqlDollar[11].strs,
				Storing:     sqlDollar[13].strs,
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.boolVal = true
		}
	case 205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.boolVal = false
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1317
		{
			// TODO(pmattis): Support opt_asc_desc.
			sqlVAL.str = sqlDollar[1].str
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1321
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1322
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1325
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1326
		{
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.dir = Ascending
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.dir = Descending
		}
	case 215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.dir = DefaultDirection
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.stmt = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[3].qname, NewName: sqlDollar[6].qname, IfExists: false}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[5].qname, NewName: sqlDollar[8].qname, IfExists: true}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[3].qname, NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[5].qname, NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[3].qname, Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[5].qname, Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.stmt = nil
		}
	case 224:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.stmt = nil
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.boolVal = true
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.boolVal = false
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1392
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1393
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: sqlDollar[3].isoLevel}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.stmt = &CommitTransaction{}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.stmt = &RollbackTransaction{}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1411
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1412
		{
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.isoLevel = UnspecifiedIsolation
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.isoLevel = sqlDollar[3].isoLevel
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.stmt = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.stmt = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.stmt = sqlDollar[5].stmt
			sqlVAL.stmt.(*Insert).Table = sqlDollar[4].qname
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.stmt = &Insert{Rows: sqlDollar[1].selectStmt}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.stmt = &Insert{Columns: sqlDollar[2].qnames, Rows: sqlDollar[4].selectStmt}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.stmt = &Insert{}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1468
		{
			unimplemented()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1469
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1470
		{
		}
	case 248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1473
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1474
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1475
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.stmt = &Update{Table: sqlDollar[3].tblExpr, Exprs: sqlDollar[5].updateExprs, Where: newWhere(astWhere, sqlDollar[7].expr)}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.updateExprs = UpdateExprs{sqlDollar[1].updateExpr}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.updateExprs = append(sqlDollar[1].updateExprs, sqlDollar[3].updateExpr)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.updateExpr = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].qname}, Expr: sqlDollar[3].expr}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: Tuple(sqlDollar[5].exprs)}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: &Subquery{Select: sqlDollar[5].selectStmt}}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
			}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
				s.Limit = sqlDollar[3].limit
			}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
			}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
				s.Limit = sqlDollar[4].limit
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.selectStmt = &Select{
				Exprs:   sqlDollar[3].selExprs,
				From:    sqlDollar[4].tblExprs,
				Where:   newWhere(astWhere, sqlDollar[5].expr),
				GroupBy: sqlDollar[6].groupBy,
				Having:  newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.selectStmt = &Select{
				Distinct: sqlDollar[2].boolVal,
				Exprs:    sqlDollar[3].selExprs,
				From:     sqlDollar[4].tblExprs,
				Where:    newWhere(astWhere, sqlDollar[5].expr),
				GroupBy:  sqlDollar[6].groupBy,
				Having:   newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.selectStmt = &Select{
				Exprs:       SelectExprs{StarSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].qname}},
				tableSelect: true,
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.selectStmt = &Union{
				Type:  astUnion,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.selectStmt = &Union{
				Type:  astIntersect,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.selectStmt = &Union{
				Type:  astExcept,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			unimplemented()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			unimplemented()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1717
		{
			unimplemented()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1720
		{
			unimplemented()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1721
		{
			unimplemented()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1724
		{
			unimplemented()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1736
		{
			unimplemented()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1737
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1740
		{
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1741
		{
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.boolVal = true
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.boolVal = false
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.boolVal = false
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.boolVal = true
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1764
		{
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1765
		{
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.orderBy = sqlDollar[1].orderBy
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.orderBy = nil
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.orderBy = OrderBy(sqlDollar[3].orders)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.orders = []*Order{sqlDollar[1].order}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.orders = append(sqlDollar[1].orders, sqlDollar[3].order)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.order = &Order{Expr: sqlDollar[1].expr, Direction: sqlDollar[2].dir}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1803
		{
			if sqlDollar[1].limit == nil {
				sqlVAL.limit = sqlDollar[2].limit
			} else {
				sqlVAL.limit = sqlDollar[1].limit
				sqlVAL.limit.Offset = sqlDollar[2].limit.Offset
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.limit = sqlDollar[1].limit
			if sqlDollar[2].limit != nil {
				sqlVAL.limit.Count = sqlDollar[2].limit.Count
			}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1823
		{
			if sqlDollar[2].expr == nil {
				sqlVAL.limit = nil
			} else {
				sqlVAL.limit = &Limit{Count: sqlDollar[2].expr}
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.expr = nil
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1864
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1865
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.groupBy = GroupBy(sqlDollar[3].exprs)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.groupBy = nil
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.expr = nil
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.selectStmt = Values{Tuple(sqlDollar[2].exprs)}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.selectStmt = append(sqlDollar[1].selectStmt.(Values), Tuple(sqlDollar[3].exprs))
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.tblExprs = sqlDollar[2].tblExprs
		}
	case 322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.tblExprs = nil
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.tblExprs = TableExprs{sqlDollar[1].tblExpr}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.tblExprs = append(sqlDollar[1].tblExprs, sqlDollar[3].tblExpr)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[2].str)}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].selectStmt}, As: Name(sqlDollar[2].str)}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1954
		{
			unimplemented()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.tblExpr = &ParenTableExpr{Expr: sqlDollar[2].tblExpr}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr, Cond: sqlDollar[5].joinCond}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[3].tblExpr, Cond: sqlDollar[4].joinCond}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[5].tblExpr}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1997
		{
			unimplemented()
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2002
		{
			unimplemented()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.str = ""
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.str = astFullJoin
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.str = astLeftJoin
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.str = astRightJoin
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.str = astInnerJoin
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2035
		{
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2036
		{
		}
	case 347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.joinCond = &UsingJoinCond{Cols: NameList(sqlDollar[3].strs)}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.joinCond = &OnJoinCond{Expr: sqlDollar[2].expr}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2061
		{
			// TODO(pmattis): Handle the "*".
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2066
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2071
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[3].qname
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[2].str)}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[3].str)}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.expr = nil
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 361:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2129
		{
			unimplemented()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2130
		{
			unimplemented()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2133
		{
			unimplemented()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2134
		{
			unimplemented()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2135
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2143
		{
			unimplemented()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.colType = &BytesType{Name: "BLOB"}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.colType = &BytesType{Name: "BYTES"}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.colType = &StringType{Name: "TEXT"}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.colType = &StringType{Name: "STRING"}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival)}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival), Scale: int(sqlDollar[4].ival)}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.colType = &DecimalType{}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.colType = &IntType{Name: "INT"}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.colType = &IntType{Name: "INT64"}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.colType = &IntType{Name: "INTEGER"}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.colType = &IntType{Name: "SMALLINT"}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.colType = &IntType{Name: "BIGINT"}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.colType = &FloatType{Name: "REAL"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.colType = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].ival)}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.colType = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DECIMAL"
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DEC"
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "NUMERIC"
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.colType = &BoolType{Name: "BOOLEAN"}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.colType = &BoolType{Name: "BOOL"}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.ival = sqlDollar[2].ival
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.ival = 0
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.colType = &IntType{Name: "BIT", N: int(sqlDollar[4].ival)}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.colType = &IntType{Name: "BIT"}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.colType = sqlDollar[1].colType
			sqlVAL.colType.(*StringType).N = int(sqlDollar[3].ival)
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.colType = &StringType{Name: "VARCHAR"}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2320
		{
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2321
		{
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.colType = &DateType{}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.colType = &TimestampType{}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.colType = &IntervalType{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2340
		{
			unimplemented()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2341
		{
			unimplemented()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2342
		{
			unimplemented()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2343
		{
			unimplemented()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2344
		{
			unimplemented()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2345
		{
			unimplemented()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2346
		{
			unimplemented()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			unimplemented()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2348
		{
			unimplemented()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2349
		{
			unimplemented()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2350
		{
			unimplemented()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2351
		{
			unimplemented()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2352
		{
			unimplemented()
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2353
		{
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2356
		{
			unimplemented()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2357
		{
			unimplemented()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2384
		{
			unimplemented()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2385
		{
			unimplemented()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2442
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2458
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.expr = &AndExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.expr = &OrExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.expr = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2517
		{
			unimplemented()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DBool(true)}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DBool(true)}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DBool(false)}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DBool(false)}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.expr = &ComparisonExpr{Operator: In, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2582
		{
			unimplemented()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2583
		{
			unimplemented()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2584
		{
			unimplemented()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.expr = sqlDollar[1].qname
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.expr = ValArg(sqlDollar[1].str)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.expr = &ParenExpr{Expr: sqlDollar[2].expr}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.expr = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].selectStmt}}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2757
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: sqlDollar[3].exprs}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2761
		{
			unimplemented()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2762
		{
			unimplemented()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2763
		{
			unimplemented()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2765
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Distinct: true, Exprs: sqlDollar[4].exprs}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: Exprs{StarExpr()}}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2783
		{
			// TODO(pmattis): Support within_group_clause, filter_clause and
			// over_clause?
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2798
		{
			unimplemented()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2799
		{
			unimplemented()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2803
		{
			unimplemented()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2820
		{
			unimplemented()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2821
		{
			unimplemented()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2822
		{
			unimplemented()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2823
		{
			unimplemented()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[3].expr, Type: sqlDollar[5].colType}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2832
		{
			unimplemented()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2833
		{
			unimplemented()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2834
		{
			unimplemented()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2835
		{
			unimplemented()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2836
		{
			unimplemented()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2837
		{
			unimplemented()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2838
		{
			unimplemented()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2839
		{
			unimplemented()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.expr = &IfExpr{Cond: sqlDollar[3].expr, True: sqlDollar[5].expr, Else: sqlDollar[7].expr}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.expr = &NullIfExpr{Expr1: sqlDollar[3].expr, Expr2: sqlDollar[5].expr}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.expr = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].expr, sqlDollar[5].expr}}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.expr = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].exprs}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2856
		{
			unimplemented()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2857
		{
			unimplemented()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2861
		{
			unimplemented()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2862
		{
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2865
		{
			unimplemented()
		}
	case 567:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2866
		{
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2870
		{
			unimplemented()
		}
	case 569:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2871
		{
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2874
		{
			unimplemented()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2875
		{
			unimplemented()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2878
		{
			unimplemented()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2881
		{
			unimplemented()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2882
		{
			unimplemented()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2883
		{
		}
	case 576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2887
		{
			unimplemented()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2898
		{
			unimplemented()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2899
		{
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2902
		{
			unimplemented()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2903
		{
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2911
		{
			unimplemented()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2912
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2913
		{
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
			unimplemented()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2917
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2923
		{
			unimplemented()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2924
		{
			unimplemented()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2925
		{
			unimplemented()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2926
		{
			unimplemented()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2927
		{
			unimplemented()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.expr = Row(nil)
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.expr = Row(nil)
		}
	case 596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2967
		{
			unimplemented()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2968
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2969
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2972
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2973
		{
			unimplemented()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2974
		{
			unimplemented()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2975
		{
			unimplemented()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2976
		{
			unimplemented()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2977
		{
			unimplemented()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2978
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2979
		{
			unimplemented()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2980
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2981
		{
			unimplemented()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2982
		{
			unimplemented()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2983
		{
			unimplemented()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2984
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2985
		{
			unimplemented()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2986
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2987
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2990
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2991
		{
			unimplemented()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2992
		{
			unimplemented()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.colTypes = []ColumnType{sqlDollar[1].colType}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.colTypes = append(sqlDollar[1].colTypes, sqlDollar[3].colType)
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.expr = Array(nil)
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.exprs = Exprs{DString(sqlDollar[1].str), sqlDollar[3].expr}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3068
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3069
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3072
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3076
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3077
		{
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3091
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3092
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3093
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3094
		{
			unimplemented()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3095
		{
			unimplemented()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3096
		{
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3099
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3102
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3105
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3106
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3107
		{
			unimplemented()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.expr = Tuple(sqlDollar[2].exprs)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.expr = &CaseExpr{Expr: sqlDollar[2].expr, Whens: sqlDollar[3].whens, Else: sqlDollar[4].expr}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.whens = []*When{sqlDollar[1].when}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.whens = append(sqlDollar[1].whens, sqlDollar[2].when)
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.when = &When{Cond: sqlDollar[2].expr, Val: sqlDollar[4].expr}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.expr = nil
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.expr = nil
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.indirectElem = NameIndirection(sqlDollar[2].str)
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.indirectElem = qualifiedStar
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.indirectElem = IndexIndirection(sqlDollar[2].str)
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr, End: sqlDollar[4].expr}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.indirect = Indirection{sqlDollar[1].indirectElem}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, sqlDollar[2].indirectElem)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3197
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3198
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.expr = DefaultVal{}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.exprs = sqlDollar[2].exprs
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.selExprs = nil
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.selExprs = SelectExprs{sqlDollar[1].selExpr}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.selExprs = append(sqlDollar[1].selExprs, sqlDollar[3].selExpr)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[3].str)}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[2].str)}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.selExpr = StarSelectExpr()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3313
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.expr = IntVal(sqlDollar[1].ival)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.expr = DBytes(sqlDollar[1].str)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3349
		{
			unimplemented()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3355
		{
			// TODO(pmattis): support opt_interval?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3360
		{
			// TODO(pmattis): Support the precision specification?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].colType}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.expr = DBool(true)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.expr = DBool(false)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.expr = DNull
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.ival = +sqlDollar[2].ival
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.ival = -sqlDollar[2].ival
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
